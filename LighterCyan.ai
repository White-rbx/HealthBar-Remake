-- string starting//
-- string:LighterCyan:ai(1)
-- Parent Finder
local Ex = game:GetService("CoreGui").TopBarApp.TopBarApp.UnibarLeftFrame.HealthBar.ExperienceSettings
local ReplicatedStorage = game:GetService("ReplicatedStorage")

--[[
Error, Warn and Information Detectors
~~~~~~~~~~~~~~~~~~
Error: 0
Warn: 0
Information: 0
~~~~~~~~~~~~~~~~~~
Script state: Good
~~~~~~~~~~~~~~~~~~
]]

-- ====FUNCTION CORNER=====
local function Corner(Scale, Offset, Parent)
  local Corner = Instance.new("UICorner")
  Corner.CornerRadius = UDim.new(Scale or 0, Offset or 0)
  Corner.Parent = Parent
  return Corner
end
-- =====END FUNCTION CORNER====

-- =====FUNCTION UILISTLAYOUT=====
local HCenter = Enum.HorizontalAlignment.Center
local VCenter = Enum.VerticalAlignment.Center
local HLeft = Enum.HorizontalAlignment.Left
local VTop = Enum.VerticalAlignment.Top
local HRight = Enum.HorizontalAlignment.Right
local VBottom = Enum.VerticalAlignment.Bottom
local FillH = Enum.FillDirection.Horizontal
local FillV = Enum.FillDirection.Vertical
local SCustom = Enum.SortOrder.Custom
local SLayout = Enum.SortOrder.LayoutOrder
local SName = Enum.SortOrder.Name

local function createUIListLayout(parent, scale, offset, HZ, VT, SO, FILL)
    local list = Instance.new("UIListLayout")
    list.Padding = UDim.new(scale or 0, offset or 0)
    list.FillDirection = FILL or FillH
    list.HorizontalAlignment = HZ or HCenter
    list.VerticalAlignment = VT or VCenter
    list.SortOrder = SO or SName
    list.Parent = parent
    return list
end
-- =====END FUNCTION UILISTLAYOUT=====

-- ====FUNCTION UISTROKE=====
local ASMBorder = Enum.ApplyStrokeMode.Border
local ASMContextual = Enum.ApplyStrokeMode.Contextual

local LJMBevel = Enum.LineJoinMode.Bevel
local LJMMiter = Enum.LineJoinMode.Miter
local LJMRound = Enum.LineJoinMode.Round

local function Stroke(parent, ASM, R, G, B, LJM, Tn, Transy)
    local stroke = parent:FindFirstChildOfClass("UIStroke") or Instance.new("UIStroke")
    stroke.ApplyStrokeMode = ASM or ASMBorder
    stroke.Color = Color3.fromRGB(R or 255, G or 255, B or 255)
    stroke.LineJoinMode = LJM or LJMRound
    stroke.Thickness = Tn or 1
    stroke.Transparency = Transy or 0
    stroke.Parent = parent
    return stroke
end
-- =====END FUNCTION UISTROKE=====

-- ====FUNCTION UIGRADIENT=====
local function Gradient(parent, rotation, offsetX, offsetY, ...)
    local grad = parent:FindFirstChildOfClass("UIGradient") or Instance.new("UIGradient")
    grad.Rotation = rotation or 0
    grad.Offset = Vector2.new(offsetX or 0, offsetY or 0)

    local colors = {...}
    local keypoints = {}

    if #colors == 0 then
        keypoints = { ColorSequenceKeypoint.new(0, Color3.new(1,1,1)), ColorSequenceKeypoint.new(1, Color3.new(1,1,1)) }
    elseif #colors == 1 then
        keypoints = { ColorSequenceKeypoint.new(0, colors[1]), ColorSequenceKeypoint.new(1, colors[1]) }
    else
        for i, c in ipairs(colors) do
            local t = (i-1) / (#colors-1)
            table.insert(keypoints, ColorSequenceKeypoint.new(t, c))
        end
    end

    grad.Color = ColorSequence.new(keypoints)
    grad.Parent = parent
    return grad
end
-- =====END FUNCTION UIGRADIENT=====

-- ====FUNCTION UIPADDING (ตามลำดับ Roblox)=====
local function Padding(parent, bottom, left, right, top)
    local pad = parent:FindFirstChildOfClass("UIPadding") or Instance.new("UIPadding")
    local function toUDim(value)
        if typeof(value) == "UDim" then
            return value
        elseif type(value) == "number" then
            return UDim.new(0, value)
        elseif type(value) == "table" and #value >= 2 then
            return UDim.new(value[1] or 0, value[2] or 0)
        else
            return UDim.new(0, 0)
        end
    end

    pad.PaddingBottom = toUDim(bottom)
    pad.PaddingLeft   = toUDim(left)
    pad.PaddingRight  = toUDim(right)
    pad.PaddingTop    = toUDim(top)

    pad.Parent = parent
    return pad
end
-- =====END FUNCTION UIPADDING==end

-- Instance
local Gui = Instance.new("ScreenGui")
Gui.Name = "LighterCyan.ai"
Gui.ResetOnSpawn = false
Gui.Parent = Ex -- Ex คือ PlayerGui ในสคริปต์นี้
createUIListLayout(Gui, 0, 5, HCenter, VBottom, SName, FillV)

local useless = Instance.new("Frame")
useless.Name = "Holder"
useless.Size = UDim2.new(0.5, 0, 0.9, 0)
useless.BackgroundTransparency = 1 -- แก้จาก .Transparency
useless.Active = false
useless.Parent = Gui
createUIListLayout(useless, 0, 5, HCenter, VCenter, SName, FillV)

local insetFrame = Instance.new("Frame")
insetFrame.Name = "InsetFrame"
insetFrame.Size = UDim2.new(0.96, 0, 1, 0)
insetFrame.BackgroundTransparency = 1
insetFrame.Parent = useless
createUIListLayout(insetFrame, 0, 5, HCenter, VBottom, SName, FillV)

-- [ INSETFRAME ]

local tabel = Instance.new("Frame")
tabel.Name = "a4_Tabel"
tabel.Size = UDim2.new(1, 0, 0, 70)
tabel.BackgroundTransparency = 1
tabel.Parent = insetFrame

local input = Instance.new("Frame")
input.Name = "a3_Input&Send"
input.Size = UDim2.new(1, 0, 0, 50)
input.BackgroundColor3 = Color3.fromRGB(255,255,255)
input.BackgroundTransparency = 0.6
input.Parent = insetFrame
Corner(0, 8, input)
Stroke(input, ASMBorder, 255, 255, 255, LJMRound, 1, 0)

local chat = Instance.new("Frame")
chat.Name = "a2_Chat"
chat.Size = UDim2.new(1, 0, 0, 300)
chat.BackgroundColor3 = Color3.fromRGB(255,255,255)
chat.BackgroundTransparency = 0.5
chat.Parent = insetFrame
Corner(0, 8, chat)
Stroke(chat,  ASMBorder, 255, 255, 255, LJMRound, 1, 0)
createUIListLayout(chat, 0, 5, HCenter, VCenter, SName, FillV)

local Scroll = Instance.new("ScrollingFrame")
Scroll.Name = "Chat"
Scroll.Size = UDim2.new(0.96, 0, 0.96, 0)
Scroll.BackgroundTransparency = 1
Scroll.ScrollBarThickness = 0
Scroll.ScrollingDirection = Enum.ScrollingDirection.Y
Scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
Scroll.Visible = true
Scroll.Parent = chat
createUIListLayout(Scroll, 0, 5, HCenter, VTop, SLayout, FillV)

local Scroll2 = Instance.new("ScrollingFrame")
Scroll2.Name = "Settings"
Scroll2.Size = UDim2.new(0.96, 0, 0.96, 0)
Scroll2.BackgroundTransparency = 1
Scroll2.ScrollBarThickness = 0
Scroll2.ScrollingDirection = Enum.ScrollingDirection.Y
Scroll2.CanvasSize = UDim2.new(0, 0, 0, 0)
Scroll2.Visible = false
Scroll2.Parent = chat
createUIListLayout(Scroll2, 0, 5, HCenter, VTop, SLayout, FillV)

local Scroll3 = Instance.new("ScrollingFrame")
Scroll3.Name = "More"
Scroll3.Size = UDim2.new(0.96, 0, 0.96, 0)
Scroll3.BackgroundTransparency = 1
Scroll3.ScrollBarThickness = 0
Scroll3.ScrollingDirection = Enum.ScrollingDirection.Y
Scroll3.CanvasSize = UDim2.new(0, 0, 0, 0)
Scroll3.Visible = false
Scroll3.Parent = chat
createUIListLayout(Scroll3, 0, 5, HCenter, VTop, SLayout, FillV)


-- =====FUNCTION CHAT AI AND PLAYER=====
-- NOTE: functions use global Scroll variable so ensure Scroll is created before calling them

local function ai(Text, Offset)
    Offset = tonumber(Offset) or 0
    local ai = Instance.new("Frame")
    ai.Name = "ai"
    ai.BackgroundColor3 = Color3.fromRGB(255,255,255)
    ai.BackgroundTransparency = 0.8
    -- ใส่ขนาด X scale + X offset และ Y height (เช่น 72px)
    ai.Size = UDim2.new(0.96, 0, 0, Offset or 60)
    ai.Parent = Scroll -- ต้องแน่ใจว่า Scroll มีอยู่แล้ว (สร้างก่อนเรียก)
    createUIListLayout(ai, 0, 10, HCenter, VCenter, SName, FillH)
    Stroke(ai, ASMBorder, 255, 255, 255, LJMRound, 1, 0) -- ใช้ LJMRound (ไม่ใช่ JSMRound)
    Corner(0, 8, ai)

    local image = Instance.new("ImageLabel")
    image.Name = "a1"
    image.Image = "rbxassetid://83032822916288" -- property ต้องใช้ Image
    image.Size = UDim2.new(0, 50, 0, 50)
    image.BackgroundTransparency = 0.8
    image.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    image.Parent = ai
    Corner(0, 8, image)
    Stroke(image, ASMBorder, 255, 255, 255, LJMRound, 1, 0)

    local text = Instance.new("TextLabel")
    text.Name = "a2"
    text.Text = tostring(Text or "")
    text.Size = UDim2.new(0.88, -8, 1, 0) -- ปรับให้ fill แนวตั้ง
    text.BackgroundTransparency = 1
    text.TextSize = 15
    text.TextWrapped = true
    text.TextXAlignment = Enum.TextXAlignment.Left
    text.TextYAlignment = Enum.TextYAlignment.Top
    text.Parent = ai
    return ai
end

local function plr(Text, Offset)
    Offset = tonumber(Offset) or 0
    local plrFrame = Instance.new("Frame")
    plrFrame.Name = "plr"
    plrFrame.BackgroundColor3 = Color3.fromRGB(255,255,255)
    plrFrame.BackgroundTransparency = 0.8
    plrFrame.Size = UDim2.new(0.96, 0, 0, Offset or 60) -- ระบุ height ชัดเจน
    plrFrame.Parent = Scroll
    createUIListLayout(plrFrame, 0, 10, HCenter, VCenter, SName, FillH)
    Stroke(plrFrame, ASMBorder, 255, 255, 255, LJMRound, 1, 0)
    Corner(0, 8, plrFrame)

    local image = Instance.new("ImageLabel")
    image.Name = "a2"
    image.Image = "rbxassetid://135474395711579"
    image.Size = UDim2.new(0, 50, 0, 50)
    image.BackgroundTransparency = 0.8
    image.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    image.Parent = plrFrame
    Corner(0, 8, image)
    Stroke(image, ASMBorder, 255, 255, 255, LJMRound, 1, 0)

    local text = Instance.new("TextLabel")
    text.Name = "a1"
    text.Text = tostring(Text or "")
    text.Size = UDim2.new(0.88, -8, 1, 0)
    text.BackgroundTransparency = 1
    text.TextSize = 15
    text.TextWrapped = true
    text.TextXAlignment = Enum.TextXAlignment.Right
    text.TextYAlignment = Enum.TextYAlignment.Top
    text.Parent = plrFrame
    return plrFrame
end

-- MESSAGE
local function mesg(Text, Offset, R, G, B, R1, G1, B1)
    Offset = tonumber(Offset) or 0
    local mesge = Instance.new("Frame")
    mesge.Name = "message"
    mesge.BackgroundColor3 = Color3.fromRGB(R, G, B or 255, 255, 255)
    mesge.BackgroundTransparency = 0.8
    mesge.Size = UDim2.new(0.96, 0, 0, Offset or 60) -- ระบุ height ชัดเจน
    mesge.Parent = Scroll
    createUIListLayout(mesge, 0, 10, HCenter, VCenter, SName, FillH)
    Stroke(mesge, ASMBorder, 255, 255, 255, LJMRound, 1, 0)
    Corner(0, 8, mesge)

    local text = Instance.new("TextLabel")
    text.Name = "a1"
    text.Text = tostring(Text or "")
    text.Size = UDim2.new(0.88, 0, 1, 0)
    text.BackgroundTransparency = 1
    text.TextColor3 = Color3.fromRGB(R1, G1, B1 or 0, 0, 0)
    text.TextSize = 15
    text.TextWrapped = true
    text.TextXAlignment = Enum.TextXAlignment.Center
    text.TextYAlignment = Enum.TextYAlignment.Center
    text.Parent = mesge
    return mesg
end

-- =====END FUNCTION AI AND PLAYER + END INSETFRAME=====

-- [ INPUT ]
local box = Instance.new("TextBox")
box.Name = "Ask"
box.Size = UDim2.new(0.72, 0, 0.9, 0)
box.Position = UDim2.new(0.02, 0, 0.05, 0)
box.BackgroundTransparency = 1
box.PlaceholderColor3 = Color3.fromRGB(95,95,95)
box.PlaceholderText = "Ask anything..."
box.Text = ""
box.TextScaled = true
box.TextColor3 = Color3.fromRGB(0,0,0)
box.RichText = true
box.ClearTextOnFocus = false
box.Parent = input

local send = Instance.new("TextButton")
send.Name = "Send"
send.Size = UDim2.new(0.076, 0, 0.9, 0)
send.Position = UDim2.new(0.75, 0, 0.05, 0)
send.BackgroundTransparency = 0.6
send.TextScaled = true
send.Text = "✓"
send.TextColor3 = Color3.fromRGB(0,0,0)
send.Parent = input
Corner(0, 8, send)
Stroke(send, ASMBorder, 255, 255, 255, LSMRound, 1, 0)

local clear = Instance.new("TextButton")
clear.Name = "clear"
clear.Size = UDim2.new(0.076, 0, 0.9, 0)
clear.Position = UDim2.new(0.835, 0, 0.05, 0)
clear.BackgroundTransparency = 0.6
clear.TextScaled = true
clear.Text = "×"
clear.TextColor3 = Color3.fromRGB(0,0,0)
clear.Parent = input
Corner(0, 8, clear)
Stroke(clear, ASMBorder, 255, 255, 255, LSMRound, 1, 0)

local rec = Instance.new("TextButton")
rec.Name = "re-chat"
rec.Size = UDim2.new(0.076, 0, 0.9, 0)
rec.Position = UDim2.new(0.918, 0, 0.05, 0)
rec.BackgroundTransparency = 0.6
rec.TextScaled = true
rec.Text = "re-chat"
rec.TextColor3 = Color3.fromRGB(0,0,0)
rec.Parent = input
Corner(0, 8, rec)
Stroke(rec, ASMBorder, 255, 255, 255, LSMRound, 1, 0)

mesg("Verison: Alpha Dev Test", 30, 76, 76, 76, 255, 255, 255)
mesg("copyright © ExperienceSettings-ChatGPT 2025", 30, 76, 76, 76, 255, 255, 255)
ai("I'm ready to chat with you!", 60)
mesg(" --[ New Chat ]--", 30, 0, 0, 0, 255, 255, 255)
mesg("Please Re-Chat before chatting.", 30, 0, 0, 0, 75, 75, 75)

local option = Instance.new("Frame")
option.Name = "a1_option"
option.Size = UDim2.new(1, 0, 0, 50)
option.BackgroundColor3 = Color3.fromRGB(255,255,255)
option.BackgroundTransparency = 1
option.Parent = insetFrame

local logo = Instance.new("Frame")
logo.Name = "a1.logo"
logo.Size = UDim2.new(0.2, 0, 0, 50)
logo.BackgroundColor3 = Color3.fromRGB(255,255,255)
logo.BackgroundTransparency = 0.6
logo.Parent = option
Corner(0, 8, logo)
Stroke(logo, ASMBorder, 255, 255, 255, LSMRound, 1, 0)

local lotext = Instance.new("TextLabel")
lotext.Name = "Text"
lotext.Size = UDim2.new(0.9, 0, 0.9, 0)
lotext.Position = UDim2.new(0.05, 0, 0.05, 0)
lotext.BackgroundTransparency = 1
lotext.Text = "LighterCyan"
lotext.TextColor3 = Color3.fromRGB(255, 255, 255)
lotext.TextStrokeTransparency = 0
lotext.TextStrokeColor3 = Color3.fromRGB(85, 255, 255)
lotext.TextScaled = true
lotext.Parent = logo

-- =====FUNCTION TEXTBUTTON=====
local function btm(Name, Text, Pos)
    local btm1 = Instance.new("Frame")
    btm1.Name = tostring(Name or "")
    btm1.BackgroundColor3 = Color3.fromRGB(255,255,255)
    btm1.BackgroundTransparency = 0.6
    btm1.Size = UDim2.new(0.1, 0, 0, 50)
    btm1.Position = UDim2.new(Pos or 0, 0, 0, 0)
    btm1.Parent = option
    Corner(0, 8, btm1)
    Stroke(btm1, ASMBorder, 255, 255, 255, LJMRound, 1, 0)

    local btm2 = Instance.new("TextButton")
    btm2.Size = UDim2.new(0.9, 0, 0.9, 0)
    btm2.Position = UDim2.new(0.05, 0, 0.05, 0)
    btm2.TextScaled = true
    btm2.BackgroundTransparency = 1
    btm2.Text = tostring(Text or "")
    btm2.Parent = btm1

    -- ใส่ Gradient ดำล้วน
    Gradient(btm2, 0, 0, 0, Color3.fromRGB(0,0,0), Color3.fromRGB(0,0,0))

    return btm1
end

btm("a2.Chat", "🗨️ Chat", 0)
btm("a3.Settings", "⚙️ Settings", 0)
btm("a4.Explorer", "🌏 Explorer", 0)
btm("a50.More", "📦 More", 0)
createUIListLayout(option, 0, 5, HLeft, VCenter, SName, FillH) -- btw Scaled 0 because UIListLayout haha, now go back to work.


-- LighterCyan Controller (Upgraded)
-- เพิ่ม: single-thinking, staged statuses, error codes, rate-limit, fetch checks
-- รันเป็น LocalScript / executor หลัง bootstrap (ai_runtime) ถูกสร้าง
-- Author: assistant (ปรับตามคำขอของผู้ใช้)

local DEBUG = false
local GUI_WAIT_TIMEOUT = 12
local THINKING_BASE = "Thinking"

local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
if not player then warn("[LC] No LocalPlayer") return end

-- util safe print
local function dbg(...)
    if not DEBUG then return end
    local t = {...}
    local parts = {"[LC]"}
    for i=1,#t do parts[#parts+1] = tostring(t[i]) end
    pcall(function() print(table.unpack(parts)) end)
end

-- ----------------------------
-- bindables / runtime helpers
-- ----------------------------
local function get_ai_runtime_folder()
    local f = player:FindFirstChild("ai_runtime")
    if f then return f end
    local ok, res = pcall(function() return player:WaitForChild("ai_runtime", 2) end)
    if ok then return res end
    return nil
end

local function wait_for_bindable(name, timeout)
    local folder = get_ai_runtime_folder()
    if not folder then return nil end
    local obj = folder:FindFirstChild(name)
    if obj then return obj end
    local ok, res = pcall(function() return folder:WaitForChild(name, timeout or 3) end)
    if ok then return res end
    return folder:FindFirstChild(name)
end

local function safe_invoke_bindable(fnName, ...)
    local fn = wait_for_bindable(fnName, 1)
    if fn and fn:IsA("BindableFunction") then
        local args = {...}                             -- เก็บ vararg ไว้ใน table
        local ok, res = pcall(function()
            return fn:Invoke(table.unpack(args))      -- ใช้ unpack ภายในสโคปนี้ได้
        end)
        return ok, res
    end
    return false, "bindable not found"
end

local function safe_fire_bindable(evName, ...)
    local ev = wait_for_bindable(evName, 1)
    if ev and ev:IsA("BindableEvent") then
        local args = {...}
        -- pcall(ev.Fire, ev, unpack(args)) -> จะเรียก ev:Fire(unpack(args))
        local ok, res = pcall(ev.Fire, ev, table.unpack(args))
        return ok, res
    end
    return false
end

-- ----------------------------
-- GUI helpers
-- ----------------------------
local function get_lightercyan_inset()
    local ok, base = pcall(function()
        if not CoreGui.TopBarApp then return nil end
        local t = CoreGui.TopBarApp.TopBarApp
        if not t then return nil end
        t = t.UnibarLeftFrame
        if not t then return nil end
        t = t.HealthBar
        if not t then return nil end
        t = t.ExperienceSettings
        if not t then return nil end
        t = t["LighterCyan.ai"]
        if not t then return nil end
        t = t.Holder
        if not t then return nil end
        t = t.InsetFrame
        return t
    end)
    if ok then return base end
    return nil
end

local function wait_for_gui(timeout)
    timeout = timeout or GUI_WAIT_TIMEOUT
    local t0 = tick()
    repeat
        local inset = get_lightercyan_inset()
        if inset then return inset end
        task.wait(0.06)
    until tick() - t0 > timeout
    return nil
end

local function find_scroll_frame()
    local inset = get_lightercyan_inset()
    if not inset then return nil end
    local chat = inset:FindFirstChild("a2_Chat")
    if not chat then
        for _,v in ipairs(inset:GetDescendants()) do
            if v.Name == "Chat" and v:IsA("ScrollingFrame") then chat = v; break end
        end
    end
    local scroll = chat and chat:FindFirstChild("Chat") or chat
    if scroll and scroll:IsA("ScrollingFrame") then return scroll end
    if chat and chat:IsA("ScrollingFrame") then return chat end
    return nil
end

local function safe_auto_size_label(lbl)
    pcall(function()
        if lbl and lbl:IsA("TextLabel") then
            lbl.AutomaticSize = Enum.AutomaticSize.Y
            lbl.TextWrapped = true
            lbl.TextYAlignment = Enum.TextYAlignment.Top
        end
    end)
end

local function update_canvas(scroll)
    if not scroll or not scroll:IsA("ScrollingFrame") then return end
    local layout = scroll:FindFirstChildOfClass("UIListLayout")
    if not layout then
        -- Try to create one? Better not to alter GUI. Just attempt Canvas update by scanning content
        task.defer(function()
            local totalY = 0
            for _,c in ipairs(scroll:GetChildren()) do
                if c:IsA("Frame") then
                    totalY = totalY + (c.AbsoluteSize.Y or 40) + 8
                end
            end
            pcall(function() scroll.CanvasSize = UDim2.new(0,0,0, math.max(totalY, scroll.AbsoluteSize.Y)) end)
        end)
        return
    end
    task.defer(function()
        local ok, size = pcall(function() return layout.AbsoluteContentSize end)
        if ok and size then
            pcall(function()
                scroll.CanvasSize = UDim2.new(0,0,0, math.max(size.Y + 8, scroll.AbsoluteSize.Y))
                scroll.CanvasPosition = Vector2.new(0, math.max(0, size.Y - scroll.AbsoluteSize.Y))
            end)
        end
    end)
end

-- helper to create a message frame (fallback)
local function create_frame_in_scroll(scroll, msgText, isError, color)
    if not scroll then return nil end
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0.96,0,0,40)
    frame.BackgroundTransparency = 1
    frame.Parent = scroll

    local icon = Instance.new("ImageLabel")
    icon.Name = "a1"
    icon.Size = UDim2.new(0,44,0,44)
    icon.Position = UDim2.new(0,6,0,-2)
    icon.BackgroundTransparency = 1
    icon.Parent = frame

    local lbl = Instance.new("TextLabel")
    lbl.Name = "a2"
    lbl.Text = tostring(msgText or "")
    lbl.BackgroundTransparency = 1
    lbl.TextWrapped = true
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.Size = UDim2.new(0.88,-8,1,-12)
    lbl.Position = UDim2.new(0,56,0,6)
    if isError and color then
        pcall(function() lbl.TextColor3 = color end)
    end
    lbl.Parent = frame
    safe_auto_size_label(lbl)
    task.wait(0.02)
    pcall(function() if lbl.AutomaticSize then frame.Size = UDim2.new(0.96,0,0, lbl.AbsoluteSize.Y + 12) end end)
    update_canvas(scroll)
    return frame
end

-- wrapper to call ai(), plr(), mesg() safely and update canvas
local function call_ai_func(text, timeSec)
    -- prefer ai(...)
    if type(ai) == "function" then
        pcall(function() ai(text, timeSec) end)
        local sc = find_scroll_frame(); update_canvas(sc)
        return true
    end
    return false
end

local function call_plr_func(text, timeSec)
    if type(plr) == "function" then
        pcall(function() plr(text, timeSec) end)
        local sc = find_scroll_frame(); update_canvas(sc)
        return true
    end
    return false
end

local function call_mesg_func(text, timeSec, R,G,B,R1,G1,B1)
    if type(mesg) == "function" then
        pcall(function() mesg(text, timeSec, R,G,B,R1,G1,B1) end)
        local sc = find_scroll_frame(); update_canvas(sc)
        return true
    end
    return false
end

-- generic show message (prefers ai/plr/mesg, fallback create_frame_in_scroll)
local function show_message(text, opts)
    opts = opts or {}
    local timeSec = opts.time or 60
    local isError = opts.isError
    local color = opts.color
    -- if is for player message, try plr
    if opts.forPlayer then
        if call_plr_func(text, timeSec) then return end
    end
    if opts.asAI then
        if call_ai_func(text, timeSec) then return end
    end
    -- try mesg if error
    if isError and color then
        if call_mesg_func(text, timeSec, color.R, color.G, color.B, color.R, color.G, color.B) then return end
    end
    -- fallback create frame
    local sc = find_scroll_frame()
    create_frame_in_scroll(sc, text, isError, color)
end

-- ----------------------------
-- Single-thinking controller
-- ----------------------------
local currentJob = nil
local jobTokenCounter = 0

local function cancel_current_job()
    if currentJob and currentJob.cancel then
        pcall(function() currentJob.cancel() end)
    end
    currentJob = nil
end

-- staged status updater for a job (will auto-stop when token canceled)
local function staged_status_loop(token, stages, baseThinking)
    -- returns a controller {cancel=function()}
    local running = true
    local startTime = tick()
    local idx = 1
    local sc = find_scroll_frame()
    local frame = nil
    -- create initial thinking frame by calling ai or fallback
    if not call_ai_func(baseThinking.." (0s)", 60) then
        frame = create_frame_in_scroll(sc, baseThinking.." (0s)", false)
    else
        -- attempt to detect the frame created by ai() by finding last a2 == baseThinking.."(0s)"
        task.wait(0.02)
        local sc2 = find_scroll_frame()
        if sc2 then
            for i=#sc2:GetChildren(),1,-1 do
                local c = sc2:GetChildren()[i]
                for _,d in ipairs(c:GetDescendants()) do
                    if d:IsA("TextLabel") and d.Name == "a2" and d.Text:match("^"..baseThinking) then
                        frame = c; break
                    end
                end
                if frame then break end
            end
        end
    end

    local timerConn = nil
    local function updateText(txt)
        if frame and frame.Parent then
            pcall(function()
                for _,d in ipairs(frame:GetDescendants()) do
                    if d:IsA("TextLabel") and d.Name == "a2" then
                        d.Text = txt
                        safe_auto_size_label(d)
                        task.wait(0.01)
                        pcall(function() if d.AutomaticSize then frame.Size = UDim2.new(0.96,0,0, d.AbsoluteSize.Y + 12) end end)
                        update_canvas(find_scroll_frame())
                    end
                end
            end)
        else
            -- fallback: call ai again
            call_ai_func(txt, 60)
        end
    end

    -- timer to show seconds
    timerConn = task.spawn(function()
        local sec = 0
        while running do
            if token.canceled then break end
            sec = math.floor(tick() - startTime)
            local text = baseThinking .. " (" .. tostring(sec) .. "s)"
            updateText(text)
            task.wait(1)
        end
    end)

    -- stage progress loop
    local stageThread = task.spawn(function()
        while running and not token.canceled do
            local st = stages[idx]
            if st then
                updateText(st)
                idx = idx + 1
            else
                -- cycle waiting text
            end
            -- wait small time between stages; if canceled break
            for i=1,4 do
                if token.canceled then break end
                task.wait(0.2)
            end
            if token.canceled then break end
        end
    end)

    local function cancel()
        running = false
        token.canceled = true
    end

    return { cancel = cancel, frame = frame, token = token }
end

-- ----------------------------
-- Error mapping utilities
-- ----------------------------
local HTTP_ERROR_MAP = {
    timeout = {code = "ERROR0 408", msg = "REQUEST TIMEOUT"},
    "404", "not found"
}
-- We'll implement function to try map http error strings to known codes
local function map_http_error(errstr)
    if not errstr then return "ERROR 500: INTERNAL SERVER ERROR" end
    local s = tostring(errstr):lower()
    if s:match("timed out") or s:match("timeout") then return "ERROR0 408: REQUEST TIMEOUT" end
    if s:match("404") or s:match("not found") then return "ERROR 404: NOT FOUND OR FAILED TO GET URL" end
    if s:match("401") or s:match("unauthorized") then return "ERROR 401: UNAUTHORIZED" end
    if s:match("400") then return "ERROR 400: BAD REQUEST" end
    if s:match("502") then return "ERROR 502: BAD GATEWAY" end
    if s:match("503") then return "ERROR 503: SERVICE UNAVAILABLE" end
    if s:match("504") then return "ERROR 504: GATEWAY TIMEOUT" end
    return "ERROR 500: INTERNAL SERVER ERROR"
end

-- LighterCyan-specific error codes for mesg
local function show_lighter_error(code)
    local sc = find_scroll_frame()
    local msg = ""
    if code == -1 then msg = "ERROR -1: TIMEOUT (He overthinking about that hehe)" end
    if code == 21 then msg = "ERROR 21: TOO LONG MESSAGE (1000+ words)" end
    if code == 1 then msg = "ERROR 1: OVERWORKS (Let he rest about 2 minutes)" end
    if msg ~= "" then
        -- prefer mesg() if available
        if call_mesg_func then
            pcall(function()
                call_mesg_func(msg, 60, 1,0,0, 1,0,0) -- red-ish (R,G,B twice used)
            end)
        end
        create_frame_in_scroll(sc, msg, true, Color3.new(1,0.25,0.25))
    end
end

-- ----------------------------
-- Rate limit and checks
-- ----------------------------
local messageTimestamps = {} -- list of epoch times of messages
local function record_message_timestamp()
    table.insert(messageTimestamps, os.time())
    -- prune older than 60s
    local now = os.time()
    local pr = {}
    for i,v in ipairs(messageTimestamps) do
        if now - v <= 60 then pr[#pr+1] = v end
    end
    messageTimestamps = pr
    return #messageTimestamps
end

local function check_rate_limit()
    local n = record_message_timestamp()
    if n > 50 then
        return false, "ERROR 1"
    end
    return true
end

-- ----------------------------
-- Fetch & compute pipeline
-- ----------------------------
local function count_words(text)
    if not text then return 0 end
    local c = 0
    for _ in tostring(text):gmatch("%w+") do c = c + 1 end
    return c
end

local function fetch_url_with_status(url, token)
    -- stages
    local stages = {
        "Searching URL...",
        'Chrome URL "'..tostring(url)..'"',
        'Getting Data "'..tostring(url)..'"...',
        "Readying...",
        "Getting Answers...",
        "Readying..",
        "Questioning..."
    }
    -- create staged status handler
    local job = staged_status_loop(token, stages, THINKING_BASE)
    -- Attempt fetch (best-effort)
    local ok, res, err = nil, nil, nil
    local success, result = pcall(function() return game:HttpGet(url) end)
    if not success then
        -- try HttpService
        success, result = pcall(function() return HttpService:GetAsync(url, true) end)
    end
    if not success then
        err = result
        ok = false
    else
        res = result
        ok = true
    end
    return ok, res, err, job
end

local function compute_answer_pipeline(input, context, token)
    -- 1) try predict_supervised
    local predOk, pred = pcall(function() return (wait_for_bindable("ai.Learning_Supervised_Predict") and wait_for_bindable("ai.Learning_Supervised_Predict"):Invoke(input)) end)
    if predOk and pred and pred ~= "" then
        return tostring(pred)
    end

    -- 2) check unsupervised topics
    local topicsOk, topics = pcall(function() return (wait_for_bindable("ai.Unsupervised_GetTopics") and wait_for_bindable("ai.Unsupervised_GetTopics"):Invoke(5)) end)
    if topicsOk and topics and #topics > 0 then
        local top = topics[1].w or topics[1].w
        return "Main topic: "..tostring(top)
    end

    -- 3) local corpus fuzzy match (use controller's rebuild_local_from_storage via bindable if exists)
    local okAll, resAll = pcall(function() return safe_invoke_bindable("ai.DataStorage_Get") end)
    local examples = nil
    if okAll and resAll then
        examples = resAll[1] or resAll
    end
    if examples then
        -- simple match: find first example containing token
        local query = tostring(input or ""):lower()
        for _,ex in ipairs(examples) do
            local ttxt = tostring(ex.text or ex):lower()
            if query ~= "" and ttxt:find(query, 1, true) then
                return "Found related: "..ttxt:sub(1,300)
            end
        end
    end

    -- fallback
    return nil
end

-- ----------------------------
-- Public ThinkAsync (main)
-- ----------------------------
local function ThinkAsync(input, context)
    -- rate limit
    local okRL, rlErr = check_rate_limit()
    if not okRL then
        show_lighter_error(1)
        return
    end

    -- cancel previous job and create token
    cancel_current_job()
    jobTokenCounter = jobTokenCounter + 1
    local token = {id = jobTokenCounter, canceled = false}
    currentJob = {token = token, cancel = function() token.canceled = true end}

    -- If input is a slash command for /fetch, handle separately
    if tostring(input):match("^/fetch%s+") or tostring(input):match("^https?://") then
        local url = tostring(input):match("^/fetch%s+(.+)$") or tostring(input)
        -- start fetch with staged status
        local okFetch, content, err, jobHandle = fetch_url_with_status(url, token)
        if token.canceled then
            if jobHandle then pcall(function() jobHandle.cancel() end) end
            return
        end
        if not okFetch then
            local errMsg = map_http_error(err)
            show_message(errMsg, {isError=true})
            if jobHandle then pcall(function() jobHandle.cancel() end) end
            currentJob = nil
            return
        end
        -- check word count
        local words = count_words(content)
        if words > 1000 then
            show_lighter_error(21)
            if jobHandle then pcall(function() jobHandle.cancel() end) end
            currentJob = nil
            return
        end
        -- put content into data storage
        pcall(function() safe_invoke_bindable("ai.DataStorage_Add", content, {source="fetch", time=os.time()}) end)
        -- compute answer using fetched content as context
        local ans = compute_answer_pipeline("", content, token) or "No focused answer from fetched content"
        if jobHandle then pcall(function() jobHandle.cancel() end) end
        show_message(ans, {asAI=true, time=60})
        currentJob = nil
        return
    end

    -- For normal text, show staged Thinking and compute
    local stages = {"Analyzing context...", "Searching memory...", "Preparing answer...", "Finalizing..."}
    local jobHandle = staged_status_loop(token, stages, THINKING_BASE)
    -- compute in background
    task.spawn(function()
        -- small delay to simulate quick thinking and allow UI to show
        local start = tick()
        -- compute (with timeout heuristic)
        local timedOut = false
        local result = nil
        local co = coroutine.create(function()
            result = compute_answer_pipeline(input, context, token)
        end)
        coroutine.resume(co)
        -- wait loop for up to 8s
        local maxWait = 8
        while coroutine.status(co) ~= "dead" and (tick() - start) < maxWait and not token.canceled do
            task.wait(0.08)
        end
        if coroutine.status(co) ~= "dead" then
            timedOut = true
            -- cancel compute by flag (we cannot force coroutine stop reliably, but we'll ignore result)
        end
        if token.canceled then
            if jobHandle then pcall(function() jobHandle.cancel() end) end
            currentJob = nil
            return
        end
        if timedOut then
            -- overthinking
            show_lighter_error(-1)
            if jobHandle then pcall(function() jobHandle.cancel() end) end
            currentJob = nil
            return
        end
        local finalAnswer = result or "Sorry, couldn't find an answer. Try /fetch <url> or add more context."
        -- done: replace thinking text with finalAnswer
        if jobHandle and jobHandle.frame then
            pcall(function()
                for _,d in ipairs(jobHandle.frame:GetDescendants()) do
                    if d:IsA("TextLabel") and d.Name == "a2" then
                        d.Text = finalAnswer
                        safe_auto_size_label(d)
                        task.wait(0.01)
                        pcall(function() if d.AutomaticSize then jobHandle.frame.Size = UDim2.new(0.96,0,0, d.AbsoluteSize.Y + 12) end end)
                        update_canvas(find_scroll_frame())
                    end
                end
            end)
        else
            show_message(finalAnswer, {asAI=true, time=60})
        end
        if jobHandle then pcall(function() jobHandle.cancel() end) end
        currentJob = nil
    end)
end

-- ----------------------------
-- GUI Hook (read-only)
-- ----------------------------
local function safe_connect_mouse(btn, fn)
    if not btn then return end
    pcall(function() if typeof(btn.MouseButton1Click) == "RBXScriptSignal" then btn.MouseButton1Click:Connect(fn) end end)
end

local function hook_gui_handlers()
    local inset = wait_for_gui(GUI_WAIT_TIMEOUT)
    if not inset then warn("[LC] GUI not found; hooks disabled"); return false end
    local inputFrame = inset:FindFirstChild("a3_Input&Send")
    if not inputFrame then
        for _,v in ipairs(inset:GetDescendants()) do
            if v.Name == "a3_Input&Send" and v:IsA("Frame") then inputFrame = v; break end
        end
    end
    if not inputFrame then warn("[LC] input frame missing"); return false end
    local AskBox = inputFrame:FindFirstChild("Ask")
    local SendBtn = inputFrame:FindFirstChild("Send")
    local ClearBtn = inputFrame:FindFirstChild("clear")
    local RecBtn = inputFrame:FindFirstChild("re-chat") or inputFrame:FindFirstChild("rec")

    safe_connect_mouse(SendBtn, function()
        local txt
        pcall(function() if AskBox and AskBox:IsA("TextBox") then txt = AskBox.Text end end)
        if txt and tostring(txt):match("%S") then
            ThinkAsync(txt, read_latest_a2(find_scroll_frame()))
            pcall(function() if AskBox then AskBox.Text = "" end end)
        end
    end)

    safe_connect_mouse(ClearBtn, function() pcall(function() if AskBox and AskBox:IsA("TextBox") then AskBox.Text = "" end end); update_canvas(find_scroll_frame()) end)

    safe_connect_mouse(RecBtn, function()
        local sc = find_scroll_frame()
        if sc then
            pcall(function()
                for _,c in ipairs(sc:GetChildren()) do if c:IsA("Frame") then pcall(function() c:Destroy() end) end end
            end)
            update_canvas(sc)
        end
    end)

    if AskBox and AskBox:IsA("TextBox") then
        pcall(function()
            AskBox.FocusLost:Connect(function(enter)
                if enter then
                    local t = AskBox.Text or ""
                    if t and t:match("%S") then
                        ThinkAsync(t, read_latest_a2(find_scroll_frame()))
                        pcall(function() AskBox.Text = "" end)
                    end
                end
            end)
        end)
    end

    dbg("GUI hooks installed")
    return true
end

-- init: initial rebuild (best effort)
pcall(function()
    -- try to invoke DataStorage_Get to warm local corpus in other modules
    pcall(function() wait_for_bindable("ai.DataStorage_Get") end)
end)

task.spawn(function()
    while task.wait(2) do
        local inset = get_lightercyan_inset()
        if inset then
            hook_gui_handlers()
            task.wait(4)
        end
    end
end)

print("[LC.Upgraded] Ready")
