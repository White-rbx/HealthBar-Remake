-- string starting//
-- string:LighterCyan:ai(1)
-- Parent Finder
local Ex = game:GetService("CoreGui").TopBarApp.TopBarApp.UnibarLeftFrame.HealthBar.ExperienceSettings

--[[
Error, Warn and Information Detectors
~~~~~~~~~~~~~~~~~~
Error: 0
Warn: 0
Information: 0
~~~~~~~~~~~~~~~~~~
Script state: Good
~~~~~~~~~~~~~~~~~~
]]

-- ====FUNCTION CORNER=====
local function Corner(Scale, Offset, Parent)
  local Corner = Instance.new("UICorner")
  Corner.CornerRadius = UDim.new(Scale or 0, Offset or 0)
  Corner.Parent = Parent
  return Corner
end
-- =====END FUNCTION CORNER====

-- =====FUNCTION UILISTLAYOUT=====
local HCenter = Enum.HorizontalAlignment.Center
local VCenter = Enum.VerticalAlignment.Center
local HLeft = Enum.HorizontalAlignment.Left
local VTop = Enum.VerticalAlignment.Top
local HRight = Enum.HorizontalAlignment.Right
local VBottom = Enum.VerticalAlignment.Bottom
local FillH = Enum.FillDirection.Horizontal
local FillV = Enum.FillDirection.Vertical
local SCustom = Enum.SortOrder.Custom
local SLayout = Enum.SortOrder.LayoutOrder
local SName = Enum.SortOrder.Name

local function createUIListLayout(parent, scale, offset, HZ, VT, SO, FILL)
    local list = Instance.new("UIListLayout")
    list.Padding = UDim.new(scale or 0, offset or 0)
    list.FillDirection = FILL or FillH
    list.HorizontalAlignment = HZ or HCenter
    list.VerticalAlignment = VT or VCenter
    list.SortOrder = SO or SName
    list.Parent = parent
    return list
end
-- =====END FUNCTION UILISTLAYOUT=====

-- ====FUNCTION UISTROKE=====
local ASMBorder = Enum.ApplyStrokeMode.Border
local ASMContextual = Enum.ApplyStrokeMode.Contextual

local LJMBevel = Enum.LineJoinMode.Bevel
local LJMMiter = Enum.LineJoinMode.Miter
local LJMRound = Enum.LineJoinMode.Round

local function Stroke(parent, ASM, R, G, B, LJM, Tn, Transy)
    local stroke = parent:FindFirstChildOfClass("UIStroke") or Instance.new("UIStroke")
    stroke.ApplyStrokeMode = ASM or ASMBorder
    stroke.Color = Color3.fromRGB(R or 255, G or 255, B or 255)
    stroke.LineJoinMode = LJM or LJMRound
    stroke.Thickness = Tn or 1
    stroke.Transparency = Transy or 0
    stroke.Parent = parent
    return stroke
end
-- =====END FUNCTION UISTROKE=====

-- ====FUNCTION UIGRADIENT=====
local function Gradient(parent, rotation, offsetX, offsetY, ...)
    local grad = parent:FindFirstChildOfClass("UIGradient") or Instance.new("UIGradient")
    grad.Rotation = rotation or 0
    grad.Offset = Vector2.new(offsetX or 0, offsetY or 0)

    local colors = {...}
    local keypoints = {}

    if #colors == 0 then
        keypoints = { ColorSequenceKeypoint.new(0, Color3.new(1,1,1)), ColorSequenceKeypoint.new(1, Color3.new(1,1,1)) }
    elseif #colors == 1 then
        keypoints = { ColorSequenceKeypoint.new(0, colors[1]), ColorSequenceKeypoint.new(1, colors[1]) }
    else
        for i, c in ipairs(colors) do
            local t = (i-1) / (#colors-1)
            table.insert(keypoints, ColorSequenceKeypoint.new(t, c))
        end
    end

    grad.Color = ColorSequence.new(keypoints)
    grad.Parent = parent
    return grad
end
-- =====END FUNCTION UIGRADIENT=====

-- ====FUNCTION UIPADDING (ตามลำดับ Roblox)=====
local function Padding(parent, bottom, left, right, top)
    local pad = parent:FindFirstChildOfClass("UIPadding") or Instance.new("UIPadding")
    local function toUDim(value)
        if typeof(value) == "UDim" then
            return value
        elseif type(value) == "number" then
            return UDim.new(0, value)
        elseif type(value) == "table" and #value >= 2 then
            return UDim.new(value[1] or 0, value[2] or 0)
        else
            return UDim.new(0, 0)
        end
    end

    pad.PaddingBottom = toUDim(bottom)
    pad.PaddingLeft   = toUDim(left)
    pad.PaddingRight  = toUDim(right)
    pad.PaddingTop    = toUDim(top)

    pad.Parent = parent
    return pad
end
-- =====END FUNCTION UIPADDING=====

-- Instance
local Gui = Instance.new("ScreenGui")
Gui.Name = "LighterCyan.ai"
Gui.ResetOnSpawn = false
Gui.Parent = Ex -- Ex คือ PlayerGui ในสคริปต์นี้
createUIListLayout(Gui, 0, 5, HCenter, VBottom, SName, FillV)

local useless = Instance.new("Frame")
useless.Name = "Holder"
useless.Size = UDim2.new(0.5, 0, 0.9, 0)
useless.BackgroundTransparency = 1 -- แก้จาก .Transparency
useless.Active = false
useless.Parent = Gui
createUIListLayout(useless, 0, 5, HCenter, VCenter, SName, FillV)

local insetFrame = Instance.new("Frame")
insetFrame.Name = "InsetFrame"
insetFrame.Size = UDim2.new(0.96, 0, 1, 0)
insetFrame.BackgroundTransparency = 1
insetFrame.Parent = useless
createUIListLayout(insetFrame, 0, 5, HCenter, VBottom, SName, FillV)

-- [ INSETFRAME ]

local tabel = Instance.new("Frame")
tabel.Name = "a4_Tabel"
tabel.Size = UDim2.new(1, 0, 0, 70)
tabel.BackgroundTransparency = 1
tabel.Parent = insetFrame

local input = Instance.new("Frame")
input.Name = "a3_Input&Send"
input.Size = UDim2.new(1, 0, 0, 50)
input.BackgroundColor3 = Color3.fromRGB(255,255,255)
input.BackgroundTransparency = 0.6
input.Parent = insetFrame
Corner(0, 8, input)
Stroke(input, ASMBorder, 255, 255, 255, LJMRound, 1, 0)

local chat = Instance.new("Frame")
chat.Name = "a2_Chat"
chat.Size = UDim2.new(1, 0, 0, 300)
chat.BackgroundColor3 = Color3.fromRGB(255,255,255)
chat.BackgroundTransparency = 0.5
chat.Parent = insetFrame
Corner(0, 8, chat)
Stroke(chat,  ASMBorder, 255, 255, 255, LJMRound, 1, 0)
createUIListLayout(chat, 0, 5, HCenter, VCenter, SName, FillV)

local Scroll = Instance.new("ScrollingFrame")
Scroll.Name = "Chat"
Scroll.Size = UDim2.new(0.96, 0, 0.96, 0)
Scroll.BackgroundTransparency = 1
Scroll.ScrollBarThickness = 0
Scroll.ScrollingDirection = Enum.ScrollingDirection.Y
Scroll.CanvasSize = UDim2.new(0, 0, 0, 0)
Scroll.Visible = true
Scroll.Parent = chat
createUIListLayout(Scroll, 0, 5, HCenter, VTop, SLayout, FillV)

local Scroll2 = Instance.new("ScrollingFrame")
Scroll2.Name = "Settings"
Scroll2.Size = UDim2.new(0.96, 0, 0.96, 0)
Scroll2.BackgroundTransparency = 1
Scroll2.ScrollBarThickness = 0
Scroll2.ScrollingDirection = Enum.ScrollingDirection.Y
Scroll2.CanvasSize = UDim2.new(0, 0, 0, 0)
Scroll2.Visible = false
Scroll2.Parent = chat
createUIListLayout(Scroll2, 0, 5, HCenter, VTop, SLayout, FillV)

local Scroll3 = Instance.new("ScrollingFrame")
Scroll3.Name = "More"
Scroll3.Size = UDim2.new(0.96, 0, 0.96, 0)
Scroll3.BackgroundTransparency = 1
Scroll3.ScrollBarThickness = 0
Scroll3.ScrollingDirection = Enum.ScrollingDirection.Y
Scroll3.CanvasSize = UDim2.new(0, 0, 0, 0)
Scroll3.Visible = false
Scroll3.Parent = chat
createUIListLayout(Scroll3, 0, 5, HCenter, VTop, SLayout, FillV)


-- =====FUNCTION CHAT AI AND PLAYER=====
-- NOTE: functions use global Scroll variable so ensure Scroll is created before calling them

local function ai(Text, Offset)
    Offset = tonumber(Offset) or 0
    local ai = Instance.new("Frame")
    ai.Name = "ai"
    ai.BackgroundColor3 = Color3.fromRGB(255,255,255)
    ai.BackgroundTransparency = 0.8
    -- ใส่ขนาด X scale + X offset และ Y height (เช่น 72px)
    ai.Size = UDim2.new(0.96, 0, 0, Offset or 60)
    ai.Parent = Scroll -- ต้องแน่ใจว่า Scroll มีอยู่แล้ว (สร้างก่อนเรียก)
    createUIListLayout(ai, 0, 10, HCenter, VCenter, SName, FillH)
    Stroke(ai, ASMBorder, 255, 255, 255, LJMRound, 1, 0) -- ใช้ LJMRound (ไม่ใช่ JSMRound)
    Corner(0, 8, ai)

    local image = Instance.new("ImageLabel")
    image.Name = "a1"
    image.Image = "rbxassetid://83032822916288" -- property ต้องใช้ Image
    image.Size = UDim2.new(0, 50, 0, 50)
    image.BackgroundTransparency = 0.8
    image.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    image.Parent = ai
    Corner(0, 8, image)
    Stroke(image, ASMBorder, 255, 255, 255, LJMRound, 1, 0)

    local text = Instance.new("TextLabel")
    text.Name = "a2"
    text.Text = tostring(Text or "")
    text.Size = UDim2.new(0.88, -8, 1, 0) -- ปรับให้ fill แนวตั้ง
    text.BackgroundTransparency = 1
    text.TextSize = 15
    text.TextWrapped = true
    text.TextXAlignment = Enum.TextXAlignment.Left
    text.TextYAlignment = Enum.TextYAlignment.Top
    text.Parent = ai
    return ai
end

local function plr(Text, Offset)
    Offset = tonumber(Offset) or 0
    local plrFrame = Instance.new("Frame")
    plrFrame.Name = "plr"
    plrFrame.BackgroundColor3 = Color3.fromRGB(255,255,255)
    plrFrame.BackgroundTransparency = 0.8
    plrFrame.Size = UDim2.new(0.96, 0, 0, Offset or 60) -- ระบุ height ชัดเจน
    plrFrame.Parent = Scroll
    createUIListLayout(plrFrame, 0, 10, HCenter, VCenter, SName, FillH)
    Stroke(plrFrame, ASMBorder, 255, 255, 255, LJMRound, 1, 0)
    Corner(0, 8, plrFrame)

    local image = Instance.new("ImageLabel")
    image.Name = "a2"
    image.Image = "rbxassetid://135474395711579"
    image.Size = UDim2.new(0, 50, 0, 50)
    image.BackgroundTransparency = 0.8
    image.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    image.Parent = plrFrame
    Corner(0, 8, image)
    Stroke(image, ASMBorder, 255, 255, 255, LJMRound, 1, 0)

    local text = Instance.new("TextLabel")
    text.Name = "a1"
    text.Text = tostring(Text or "")
    text.Size = UDim2.new(0.88, -8, 1, 0)
    text.BackgroundTransparency = 1
    text.TextSize = 15
    text.TextWrapped = true
    text.TextXAlignment = Enum.TextXAlignment.Right
    text.TextYAlignment = Enum.TextYAlignment.Top
    text.Parent = plrFrame
    return plrFrame
end

-- MESSAGE
local function mesg(Text, Offset, R, G, B, R1, G1, B1)
    Offset = tonumber(Offset) or 0
    local mesge = Instance.new("Frame")
    mesge.Name = "message"
    mesge.BackgroundColor3 = Color3.fromRGB(R, G, B or 255, 255, 255)
    mesge.BackgroundTransparency = 0.8
    mesge.Size = UDim2.new(0.96, 0, 0, Offset or 60) -- ระบุ height ชัดเจน
    mesge.Parent = Scroll
    createUIListLayout(mesge, 0, 10, HCenter, VCenter, SName, FillH)
    Stroke(mesge, ASMBorder, 255, 255, 255, LJMRound, 1, 0)
    Corner(0, 8, mesge)

    local text = Instance.new("TextLabel")
    text.Name = "a1"
    text.Text = tostring(Text or "")
    text.Size = UDim2.new(0.88, 0, 1, 0)
    text.BackgroundTransparency = 1
    text.TextColor3 = Color3.fromRGB(R1, G1, B1 or 0, 0, 0)
    text.TextSize = 15
    text.TextWrapped = true
    text.TextXAlignment = Enum.TextXAlignment.Center
    text.TextYAlignment = Enum.TextYAlignment.Center
    text.Parent = mesge
    return mesg
end

-- =====END FUNCTION AI AND PLAYER + END INSETFRAME=====

-- [ INPUT ]
local box = Instance.new("TextBox")
box.Name = "Ask"
box.Size = UDim2.new(0.72, 0, 0.9, 0)
box.Position = UDim2.new(0.02, 0, 0.05, 0)
box.BackgroundTransparency = 1
box.PlaceholderColor3 = Color3.fromRGB(95,95,95)
box.PlaceholderText = "Ask anything..."
box.Text = ""
box.TextScaled = true
box.TextColor3 = Color3.fromRGB(0,0,0)
box.RichText = true
box.ClearTextOnFocus = false
box.Parent = input

local send = Instance.new("TextButton")
send.Name = "Send"
send.Size = UDim2.new(0.076, 0, 0.9, 0)
send.Position = UDim2.new(0.75, 0, 0.05, 0)
send.BackgroundTransparency = 0.6
send.TextScaled = true
send.Text = "✓"
send.TextColor3 = Color3.fromRGB(0,0,0)
send.Parent = input
Corner(0, 8, send)
Stroke(send, ASMBorder, 255, 255, 255, LSMRound, 1, 0)

local clear = Instance.new("TextButton")
clear.Name = "clear"
clear.Size = UDim2.new(0.076, 0, 0.9, 0)
clear.Position = UDim2.new(0.835, 0, 0.05, 0)
clear.BackgroundTransparency = 0.6
clear.TextScaled = true
clear.Text = "×"
clear.TextColor3 = Color3.fromRGB(0,0,0)
clear.Parent = input
Corner(0, 8, clear)
Stroke(clear, ASMBorder, 255, 255, 255, LSMRound, 1, 0)

local rec = Instance.new("TextButton")
rec.Name = "re-chat"
rec.Size = UDim2.new(0.076, 0, 0.9, 0)
rec.Position = UDim2.new(0.918, 0, 0.05, 0)
rec.BackgroundTransparency = 0.6
rec.TextScaled = true
rec.Text = "re-chat"
rec.TextColor3 = Color3.fromRGB(0,0,0)
rec.Parent = input
Corner(0, 8, rec)
Stroke(rec, ASMBorder, 255, 255, 255, LSMRound, 1, 0)

mesg("Verison: Alpha Dev Test", 30, 76, 76, 76, 255, 255, 255)
mesg("copyright © ExperienceSettings-ChatGPT 2025", 30, 76, 76, 76, 255, 255, 255)
ai("I'm ready to chat with you!", 60)
mesg(" --[ New Chat ]--", 30, 0, 0, 0, 255, 255, 255)
mesg("Chat is empty, Please type something!", 30, 0, 0, 0, 75, 75, 75)

local option = Instance.new("Frame")
option.Name = "a1_option"
option.Size = UDim2.new(1, 0, 0, 50)
option.BackgroundColor3 = Color3.fromRGB(255,255,255)
option.BackgroundTransparency = 1
option.Parent = insetFrame

local logo = Instance.new("Frame")
logo.Name = "a1.logo"
logo.Size = UDim2.new(0.2, 0, 0, 50)
logo.BackgroundColor3 = Color3.fromRGB(255,255,255)
logo.BackgroundTransparency = 0.6
logo.Parent = option
Corner(0, 8, logo)
Stroke(logo, ASMBorder, 255, 255, 255, LSMRound, 1, 0)

local lotext = Instance.new("TextLabel")
lotext.Name = "Text"
lotext.Size = UDim2.new(0.9, 0, 0.9, 0)
lotext.Position = UDim2.new(0.05, 0, 0.05, 0)
lotext.BackgroundTransparency = 1
lotext.Text = "LighterCyan"
lotext.TextColor3 = Color3.fromRGB(255, 255, 255)
lotext.TextStrokeTransparency = 0
lotext.TextStrokeColor3 = Color3.fromRGB(85, 255, 255)
lotext.TextScaled = true
lotext.Parent = logo

-- =====FUNCTION TEXTBUTTON=====
local function btm(Name, Text, Pos)
    local btm1 = Instance.new("Frame")
    btm1.Name = tostring(Name or "")
    btm1.BackgroundColor3 = Color3.fromRGB(255,255,255)
    btm1.BackgroundTransparency = 0.6
    btm1.Size = UDim2.new(0.1, 0, 0, 50)
    btm1.Position = UDim2.new(Pos or 0, 0, 0, 0)
    btm1.Parent = option
    Corner(0, 8, btm1)
    Stroke(btm1, ASMBorder, 255, 255, 255, LJMRound, 1, 0)

    local btm2 = Instance.new("TextButton")
    btm2.Size = UDim2.new(0.9, 0, 0.9, 0)
    btm2.Position = UDim2.new(0.05, 0, 0.05, 0)
    btm2.TextScaled = true
    btm2.BackgroundTransparency = 1
    btm2.Text = tostring(Text or "")
    btm2.Parent = btm1

    -- ใส่ Gradient ดำล้วน
    Gradient(btm2, 0, 0, 0, Color3.fromRGB(0,0,0), Color3.fromRGB(0,0,0))

    return btm1
end

btm("a2.Chat", "🗨️ Chat", 0)
btm("a3.Settings", "⚙️ Settings", 0)
btm("a4.Explorer", "🌏 Explorer", 0)
btm("a50.More", "📦 More", 0)
createUIListLayout(option, 0, 5, HLeft, VCenter, SName, FillH) -- btw Scaled 0 because UIListLayout haha, now go back to work.

-- LighterCyan — FULL (merged, hardened) 
-- Single-file script: read-only GUI path under CoreGui, extended AI, fetch, loadstring, explorer, localscript
-- Run in executor (KRNL) or as a LocalScript after GUI is present.

local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

local function pcallf(fn, ...) local ok, a, b = pcall(fn, ...) return ok, a, b end
local function dbg(...) pcall(function() print("[LC]", ...) end) end

-- ---------- Find base GUI ----------
local function getBase()
    local ok, root = pcall(function()
        return CoreGui.TopBarApp
            and CoreGui.TopBarApp.TopBarApp
            and CoreGui.TopBarApp.TopBarApp.UnibarLeftFrame
            and CoreGui.TopBarApp.TopBarApp.UnibarLeftFrame.HealthBar
            and CoreGui.TopBarApp.TopBarApp.UnibarLeftFrame.HealthBar.ExperienceSettings
            and CoreGui.TopBarApp.TopBarApp.UnibarLeftFrame.HealthBar.ExperienceSettings["LighterCyan.ai"]
            and CoreGui.TopBarApp.TopBarApp.UnibarLeftFrame.HealthBar.ExperienceSettings["LighterCyan.ai"].Holder
            and CoreGui.TopBarApp.TopBarApp.UnibarLeftFrame.HealthBar.ExperienceSettings["LighterCyan.ai"].Holder.InsetFrame
    end)
    return ok and root or nil
end

local function waitForBase(timeout)
    timeout = timeout or 10
    local t0 = tick()
    repeat
        local b = getBase()
        if b then return b end
        task.wait(0.06)
    until tick() - t0 > timeout
    return nil
end

local base = waitForBase(10)
if not base then warn("[LC] LighterCyan.ai not found under CoreGui; aborting."); return end

-- ---------- Resolve UI refs (read-only) ----------
local function waitChildSafe(parent, name, t)
    if not parent then return nil end
    local ok, res = pcall(function() return parent:WaitForChild(name, t or 3) end)
    if ok and res then return res end
    return parent:FindFirstChild(name)
end

local inputFrame = base:FindFirstChild("a3_Input&Send") or waitChildSafe(base, "a3_Input&Send", 1)
local chatFrame  = base:FindFirstChild("a2_Chat") or waitChildSafe(base, "a2_Chat", 1)
local AskBox     = inputFrame and waitChildSafe(inputFrame, "Ask", 1)
local SendBtn    = inputFrame and waitChildSafe(inputFrame, "Send", 1)
local ClearBtn   = inputFrame and waitChildSafe(inputFrame, "clear", 1)
local RecBtn     = inputFrame and (waitChildSafe(inputFrame, "re-chat", 1) or waitChildSafe(inputFrame, "rec", 1))
local Scroll     = chatFrame and waitChildSafe(chatFrame, "Chat", 1)

-- ---------- Fallback UI creators ----------
local function newAiFrameFast(text)
    if not Scroll then return nil end
    local f = Instance.new("Frame"); f.Name = "ai"; f.Parent = Scroll
    f.Size = UDim2.new(0.96,0,0,40)
    local icon = Instance.new("ImageLabel"); icon.Name="a1"; icon.Parent=f; icon.BackgroundTransparency=1; icon.Size=UDim2.new(0,44,0,44); icon.Position=UDim2.new(0,6,0,-2)
    local lbl = Instance.new("TextLabel"); lbl.Name="a2"; lbl.Parent=f
    lbl.BackgroundTransparency=1; lbl.TextWrapped=true; lbl.Text = tostring(text or ""); lbl.Size=UDim2.new(0.88,-8,1,-12); lbl.Position=UDim2.new(0,56,0,6)
    pcall(function() lbl.AutomaticSize = Enum.AutomaticSize.Y end)
    pcall(function()
        task.wait(0.01)
        if lbl.AutomaticSize then f.Size = UDim2.new(0.96,0,0, lbl.AbsoluteSize.Y + 12) end
    end)
    return f
end

local function newPlrFrameFast(text)
    if not Scroll then return nil end
    local f = Instance.new("Frame"); f.Name = "plr"; f.Parent = Scroll
    f.Size = UDim2.new(0.96,0,0,40)
    local lbl = Instance.new("TextLabel"); lbl.Name="a1"; lbl.Parent=f
    lbl.BackgroundTransparency=1; lbl.TextWrapped=true; lbl.Text=tostring(text or ""); lbl.Size=UDim2.new(0.88,-8,1,-12); lbl.Position=UDim2.new(0,56,0,6)
    pcall(function() lbl.AutomaticSize = Enum.AutomaticSize.Y end)
    pcall(function() task.wait(0.01); if lbl.AutomaticSize then f.Size = UDim2.new(0.96,0,0, lbl.AbsoluteSize.Y + 12) end end)
    local icon = Instance.new("ImageLabel"); icon.Name="a2"; icon.Parent=f; icon.BackgroundTransparency=1; icon.Size=UDim2.new(0,44,0,44); icon.Position=UDim2.new(0,6,0,-2)
    return f
end

local function createMesgFast(text)
    if not Scroll then return nil end
    local f = Instance.new("Frame"); f.Name="message"; f.Parent=Scroll; f.Size=UDim2.new(0.96,0,0,40)
    local lbl = Instance.new("TextLabel"); lbl.Name="a1"; lbl.Parent=f; lbl.BackgroundTransparency=1; lbl.TextWrapped=true; lbl.Text=tostring(text or ""); lbl.Size=UDim2.new(0.88,-8,1,0); lbl.Position=UDim2.new(0,56,0,0)
    return f
end

local function updateCanvas()
    if not Scroll then return end
    local layout = Scroll:FindFirstChildOfClass("UIListLayout")
    if not layout then return end
    task.defer(function()
        local ok, size = pcall(function() return layout.AbsoluteContentSize end)
        if ok and size then
            pcall(function()
                Scroll.CanvasSize = UDim2.new(0,0,0, math.max(size.Y + 8, Scroll.AbsoluteSize.Y))
                Scroll.CanvasPosition = Vector2.new(0, math.max(0, size.Y - Scroll.AbsoluteSize.Y))
            end)
        end
    end)
end

-- ---------- Auto-resize watch ----------
local function adjustFrameOnTextChange(frame)
    if not frame then return end
    task.spawn(function()
        task.wait(0.01)
        local lbl = nil
        for _, d in ipairs(frame:GetDescendants()) do
            if d:IsA("TextLabel") and (d.Name=="a1" or d.Name=="a2") then lbl = d; break end
        end
        if not lbl then return end
        pcall(function()
            pcall(function() lbl.AutomaticSize = Enum.AutomaticSize.Y end)
            task.wait(0.02)
            if lbl.AbsoluteSize and lbl.AbsoluteSize.Y and lbl.AbsoluteSize.Y > 0 then
                frame.Size = UDim2.new(frame.Size.X.Scale, frame.Size.X.Offset, 0, lbl.AbsoluteSize.Y + 14)
            else
                local w = math.max(150, (Scroll.AbsoluteSize.X * 0.9) - 72)
                local h = TextService:GetTextSize(lbl.Text, lbl.TextSize, lbl.Font, Vector2.new(w, math.huge)).Y
                frame.Size = UDim2.new(frame.Size.X.Scale, frame.Size.X.Offset, 0, math.max(28, h + 18))
            end
        end)
        pcall(updateCanvas)
    end)
end

local function watchFramesForResize()
    if not Scroll then return end
    for _, child in ipairs(Scroll:GetChildren()) do
        if child:IsA("Frame") then
            for _, d in ipairs(child:GetDescendants()) do
                if d:IsA("TextLabel") and (d.Name=="a1" or d.Name=="a2") then
                    d:GetPropertyChangedSignal("Text"):Connect(function() adjustFrameOnTextChange(child) end)
                end
            end
        end
    end
    Scroll.ChildAdded:Connect(function(c)
        task.wait(0.02)
        for _, d in ipairs(c:GetDescendants()) do
            if d:IsA("TextLabel") and (d.Name=="a1" or d.Name=="a2") then
                d:GetPropertyChangedSignal("Text"):Connect(function() adjustFrameOnTextChange(c) end)
            end
        end
        adjustFrameOnTextChange(c)
    end)
end

-- ---------- Corpus & Fetch ----------
local Corpus = { en = {}, th = {}, ext = {} }
local function detectLang(s) if not s then return "en" end if tostring(s):find("[ก-๙]") then return "th" end return "en" end
local function AddToCorpus(lang, txt) if not txt or txt=="" then return end lang = lang or detectLang(txt) Corpus[lang] = Corpus[lang] or {} table.insert(Corpus[lang], tostring(txt)) end
local function TrainFromScroll(lang)
    if not Scroll then return end
    lang = lang or "auto"
    for _, d in ipairs(Scroll:GetDescendants()) do
        if d:IsA("TextLabel") and (d.Name=="a1" or d.Name=="a2") then
            if lang=="auto" then AddToCorpus(detectLang(d.Text), d.Text) else AddToCorpus(lang, d.Text) end
        end
    end
end

local function FetchURL(url)
    if not url or url=="" then return false, "empty url" end
    -- try game:HttpGet then HttpService:GetAsync
    local ok, res = pcall(function() return game:HttpGet(url) end)
    if ok and res then AddToCorpus("ext", res); return true, res end
    ok, res = pcall(function() return HttpService:GetAsync(url, true) end)
    if ok and res then AddToCorpus("ext", res); return true, res end
    return false, "Fetch failed or disabled"
end

local function SetExternalContent(text) AddToCorpus("ext", tostring(text or "")) return true end

-- ---------- Matching & simpleThink ----------
local function findBestMatch(input, context, lang)
    input = tostring(input or ""):lower()
    context = tostring(context or ""):lower()
    lang = lang or detectLang(input)
    local tokens = {}
    for w in input:gmatch("%w+") do table.insert(tokens, w) end
    for w in context:gmatch("%w+") do table.insert(tokens, w) end
    local bestScore, bestText = 0, nil
    for L, list in pairs(Corpus) do
        for _, entry in ipairs(list) do
            local el = tostring(entry):lower()
            local score = 0
            for _, t in ipairs(tokens) do if #t>=3 and el:find(t,1,true) then score = score + 1 end end
            if L=="ext" then score = score + 2 end
            if L==lang then score = score + 1 end
            if score > bestScore then bestScore, bestText = score, entry end
        end
    end
    return bestText
end

local function simpleThink(input, context, lang)
    local pick = findBestMatch(input, context, lang)
    if pick then
        if lang=="th" then return "คิดว่า " .. tostring(pick) end
        return "I think " .. tostring(pick)
    end
    if lang=="th" then
        if input~="" then return "ฉันคิดเกี่ยวกับ: " .. input:sub(1,300) end
        return "ฉันว่างเปล่า ลองพิมพ์อะไรมา"
    else
        if input~="" then return "I'm thinking about: " .. input:sub(1,300) end
        return "I'm idle — try typing something"
    end
end

-- ---------- run code / localscript ----------
local function runCodeString(code)
    if not code or code=="" then return false, "empty code" end
    if type(loadstring) == "function" then
        local ok, f = pcall(loadstring, code)
        if not ok then return false, f end
        local ok2, res = pcall(f)
        if ok2 then return true, res else return false, res end
    elseif type(load) == "function" then
        local f, e = load(code)
        if not f then return false, e end
        local ok, res = pcall(f)
        if ok then return true, res else return false, res end
    else return false, "no loadstring/load" end
end

local function RunExplorer(code)
    return runCodeString(code)
end

local function RunLocalScript(source, parentPath)
    local plr = Players.LocalPlayer
    local parent = plr and plr:FindFirstChild("PlayerGui")
    if parentPath and type(parentPath)=="string" and parentPath:match("^PlayerGui") and plr then parent = plr:FindFirstChild("PlayerGui") or parent end
    if not parent then return false, "no parent for LocalScript" end
    local ls = Instance.new("LocalScript")
    ls.Name = "RunLS_"..tostring(math.random(1000,9999))
    ls.Source = tostring(source or "")
    local ok, res = pcall(function() ls.Parent = parent end)
    if not ok then return false, res end
    return true, ls
end

-- ---------- Read latest a2 helper ----------
local function ReadLatestA2()
    if not Scroll then return nil end
    for i = #Scroll:GetChildren(), 1, -1 do
        local ch = Scroll:GetChildren()[i]
        for _, d in ipairs(ch:GetDescendants()) do
            if d:IsA("TextLabel") and d.Name=="a2" then return d.Text end
        end
    end
    return nil
end

-- ---------- Hardened ThinkAsync & helper showThinking/replace ----------
local function showThinking()
    local thr = nil
    if type(ai)=="function" then
        local ok = pcall(function() ai("Thinking...", 60) end)
        if ok and Scroll then
            for i = #Scroll:GetChildren(), 1, -1 do
                local ch = Scroll:GetChildren()[i]
                if ch then
                    for _, d in ipairs(ch:GetDescendants()) do
                        if d:IsA("TextLabel") and d.Name=="a2" and d.Text=="Thinking..." then thr = ch; break end
                    end
                    if thr then break end
                end
            end
        end
    end
    if not thr then
        local ok, f = pcall(newAiFrameFast, "Thinking...")
        if ok then thr = f end
    end
    return thr
end

local function replaceThinkingFrameText(thinkingFrame, text)
    if thinkingFrame and thinkingFrame.Parent then
        pcall(function()
            for _, d in ipairs(thinkingFrame:GetDescendants()) do
                if d:IsA("TextLabel") and d.Name=="a2" then d.Text = tostring(text or "") end
            end
        end)
        pcall(function() adjustFrameOnTextChange(thinkingFrame) end)
    else
        if type(ai)=="function" then pcall(ai, text, 60) else pcall(newAiFrameFast, text) end
    end
    pcall(updateCanvas)
end

local function ThinkAsync_Hardened(input, context, lang)
    input = tostring(input or "")
    context = tostring(context or "")
    lang = lang or detectLang(input)
    if type(simpleThink) ~= "function" then
        replaceThinkingFrameText(nil, (lang=="th" and "ระบบไม่พบ simpleThink" or "simpleThink missing"))
        return
    end
    local thinkingFrame = nil
    pcall(function() thinkingFrame = showThinking() end)
    task.spawn(function()
        task.wait(0.08)
        local ok, ans = pcall(simpleThink, input, context, lang)
        if not ok then ans = (lang=="th" and "เกิดข้อผิดพลาดในการคิด" or "Error thinking") end
        pcall(replaceThinkingFrameText, thinkingFrame, ans)
    end)
end

-- Expose ThinkAsync to use Hardened version
ThinkAsync = ThinkAsync_Hardened

-- ---------- Command & Text Handler (hardened) ----------
local function handleCommandOrText_Hardened(inputText)
    if not inputText or inputText=="" then return end
    inputText = tostring(inputText):match("^%s*(.-)%s*$")
    if inputText:sub(1,1) == "/" then
        local cmd = inputText:sub(2)
        -- loadstring / eval / raw code
        if cmd:match("^%s*loadstring") or cmd:match("^%s*%(") or cmd:match("^%s*eval") then
            local ok, res = pcall(runCodeString, cmd)
            if ok then pcall(function() if type(ai)=="function" then ai(tostring(res or "Executed"),60) else newAiFrameFast(tostring(res or "Executed")) end end)
            else pcall(function() if type(ai)=="function" then ai("Error: "..tostring(res),60) else newAiFrameFast("Error: "..tostring(res)) end end) end
            updateCanvas(); return
        end
        -- fetch
        local fmatch = cmd:match("^%s*fetch%s+(.+)$") or cmd:match("^(https?://.+)$")
        if fmatch then
            pcall(function() if type(ai)=="function" then ai("Thinking...",60) else newAiFrameFast("Thinking...") end end)
            updateCanvas()
            task.spawn(function()
                local ok, res = pcall(FetchURL, fmatch)
                if not ok or not res then pcall(function() if type(ai)=="function" then ai("Fetch error: "..tostring(res),60) else newAiFrameFast("Fetch error: "..tostring(res)) end end); updateCanvas(); return end
                -- train from fetched content and think with it
                TrainFromScroll()
                ThinkAsync_Hardened("", tostring(res):sub(1,2000), detectLang(res))
            end)
            return
        end
        -- run/explorer
        local runmatch = cmd:match("^%s*run%s+(.+)$") or cmd:match("^%s*explorer%s+(.+)$")
        if runmatch then
            local ok, res = pcall(RunExplorer, runmatch)
            if ok then pcall(function() if type(ai)=="function" then ai(tostring(res or "Executed"),60) else newAiFrameFast(tostring(res or "Executed")) end end)
            else pcall(function() if type(ai)=="function" then ai("Run error: "..tostring(res),60) else newAiFrameFast("Run error: "..tostring(res)) end end) end
            updateCanvas(); return
        end
    end

    -- normal text: plr + train + think
    if type(plr)=="function" then
        local ok, r = pcall(plr, inputText, 60)
        if not ok then dbg("plr failed:", r); pcall(newPlrFrameFast, inputText) end
    else pcall(newPlrFrameFast, inputText) end

    TrainFromScroll()
    local latest = ReadLatestA2() or ""
    ThinkAsync_Hardened(inputText, latest, detectLang(inputText))
end

handleCommandOrText = handleCommandOrText_Hardened

-- ---------- Wiring send / clear / rec / enter ----------
local function safeConnect(btn, fn)
    if not btn then return end
    pcall(function() if typeof(btn.MouseButton1Click)=="RBXScriptSignal" then btn.MouseButton1Click:Connect(fn) end end)
end

local function hookHandlers()
    safeConnect(SendBtn, function()
        local txt = AskBox and AskBox.Text or ""
        if txt=="" then return end
        if txt:match("^https?://") then handleCommandOrText("/fetch "..txt) else handleCommandOrText(txt) end
        pcall(function() if AskBox then AskBox.Text = "" end end)
    end)
    safeConnect(ClearBtn, function() pcall(function() if AskBox and AskBox:IsA("TextBox") then AskBox.Text = "" end end); updateCanvas() end)
    safeConnect(RecBtn, function() pcall(function() if Scroll then for _,c in ipairs(Scroll:GetChildren()) do if c:IsA("Frame") then pcall(function() c:Destroy() end) end end; updateCanvas() end end) end)
    if AskBox and AskBox:IsA("TextBox") then pcall(function() AskBox.FocusLost:Connect(function(enter) if enter then local txt = AskBox.Text or "" if txt=="" then return end if txt:match("^https?://") then handleCommandOrText("/fetch "..txt) else handleCommandOrText(txt) end pcall(function() AskBox.Text = "" end); updateCanvas() end end) end) end
end

hookHandlers()
watchFramesForResize()

-- rehook if GUI reloads
task.spawn(function()
    while task.wait(2) do
        if (not inputFrame or not inputFrame.Parent) or (not Scroll or not Scroll.Parent) then
            local nb = getBase()
            if nb then
                inputFrame = nb:FindFirstChild("a3_Input&Send") or inputFrame
                chatFrame  = nb:FindFirstChild("a2_Chat") or chatFrame
                AskBox     = inputFrame and inputFrame:FindFirstChild("Ask") or AskBox
                SendBtn    = inputFrame and inputFrame:FindFirstChild("Send") or SendBtn
                ClearBtn   = inputFrame and inputFrame:FindFirstChild("clear") or ClearBtn
                RecBtn     = inputFrame and (inputFrame:FindFirstChild("re-chat") or inputFrame:FindFirstChild("rec")) or RecBtn
                Scroll     = chatFrame and chatFrame:FindFirstChild("Chat") or Scroll
                hookHandlers()
                if Scroll then updateCanvas() end
            end
        end
    end
end)

-- Expose API
local rootParent = base.Parent or base
local holder = rootParent:FindFirstChild("__SEND_EXT_API__") or Instance.new("Folder")
holder.Name = "__SEND_EXT_API__"; holder.Parent = rootParent
for _,c in ipairs(holder:GetChildren()) do if c:IsA("BindableFunction") or c:IsA("BindableEvent") then pcall(function() c:Destroy() end) end end
local bf = Instance.new("BindableFunction"); bf.Name = "GetExtendedAPI"; bf.Parent = holder
bf.OnInvoke = function()
    return {
        TrainFromScroll = TrainFromScroll,
        TrainText = function(lang, txt) AddToCorpus(lang, txt) end,
        FetchURL = FetchURL,
        SetExternalContent = SetExternalContent,
        ThinkAsync = ThinkAsync,
        RunExplorer = RunExplorer,
        RunLocalScript = RunLocalScript,
        GetCorpus = function() return Corpus end,
        UpdateCanvas = updateCanvas,
    }
end

print("[LighterCyan FULL] Ready (hardened, merged).")
