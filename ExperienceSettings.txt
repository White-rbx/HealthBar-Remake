-- Client: ExperienceUI_Client.lua
-- LocalScript — สร้าง UI, ควบคุม Toggle, รับ thumbnail จาก Client API

--!strict
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local StarterGui = game:GetService("StarterGui")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")

local localPlayer = Players.LocalPlayer

-- ======= Helpers =======
local function createUICorner(parent, scale, offset)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(scale, offset)
    corner.Parent = parent
    return corner
end

-- ======= UIListLayout helpers =========
local HCenter = Enum.HorizontalAlignment.Center
local VCenter = Enum.VerticalAlignment.Center
local HLeft = Enum.HorizontalAlignment.Left
local VTop = Enum.VerticalAlignment.Top
local FillH = Enum.FillDirection.Horizontal
local FillV = Enum.FillDirection.Vertical

local function createUIListLayout(parent, scale, offset, HZ, VT, FILL)
    local list = Instance.new("UIListLayout")
    list.Padding = UDim.new(scale or 0, offset or 0)
    list.FillDirection = FILL or FillH
    list.HorizontalAlignment = HZ or HCenter
    list.VerticalAlignment = VT or VCenter
    list.Parent = parent
    return list
end

local function tweenObject(obj, props, time, style, direction)
    time = time or 0.28
    style = style or Enum.EasingStyle.Sine
    direction = direction or Enum.EasingDirection.Out
    local info = TweenInfo.new(time, style, direction)
    local t = TweenService:Create(obj, info, props)
    t:Play()
    return t
end

-- safe tween wrapper (ไม่ล่มถ้าหาก obj หาย)
local function safeTween(obj, props, time, style, dir)
    if not obj or not obj.Parent then return end
    pcall(function()
        tweenObject(obj, props, time, style, dir)
    end)
end

-- Safe Find path to the HealthBar where we parent our Menu
local function getHealthBar()
    local ok, topBar = pcall(function() return CoreGui:WaitForChild("TopBarApp", 5) end)
    if not ok or not topBar then return nil end
    local inner = topBar:FindFirstChild("TopBarApp")
    local left = inner and inner:FindFirstChild("UnibarLeftFrame")
    local healthBar = left and left:FindFirstChild("HealthBar")
    return healthBar
end

local healthBar = getHealthBar()
if not healthBar then
    warn("ExperienceUI: HealthBar not found. Aborting UI creation.")
    return
end

-- ======= Build UI =======
local expSettings = Instance.new("Folder")
expSettings.Name = "ExperienceSettings"
expSettings.Parent = healthBar

local menuGui = Instance.new("ScreenGui")
menuGui.Name = "Menu"
menuGui.ResetOnSpawn = false
menuGui.IgnoreGuiInset = true
menuGui.Parent = expSettings

-- Main TopBar holder (small)
local mtb = Instance.new("Frame")
mtb.Name = "TopBar"
mtb.Position = UDim2.new(0, 0, 0.02, 0)
mtb.Size = UDim2.new(1, 0, 0, 43)
mtb.BackgroundTransparency = 1
mtb.Parent = menuGui
createUIListLayout(mtb, 0.005, 0, HCenter, VTop, FillH)

-- Holder image area (left)
local hr = Instance.new("Frame")
hr.Name = "Holder"
hr.Size = UDim2.new(0, 370, 1, 0)
hr.BackgroundColor3 = Color3.fromRGB(18, 18, 21)
hr.BackgroundTransparency = 0.2
hr.Parent = mtb
createUICorner(hr, 1, 0)
createUIListLayout(hr, 0.1, 0, HCenter, VCenter, FillH)

-- Top bar buttons container (tb) — starts collapsed
local tb = Instance.new("ScrollingFrame")
tb.Name = "TopButtons"
tb.Size = UDim2.new(0, 0, 0, 0) -- start collapsed
tb.BackgroundColor3 = Color3.fromRGB(18, 18, 21)
tb.BackgroundTransparency = 0.2
tb.ScrollBarThickness = 4
tb.CanvasSize = UDim2.new(0, 0, 0, 0)
tb.ScrollingDirection = Enum.ScrollingDirection.XY
tb.Visible = false
tb.Parent = mtb
createUICorner(tb, 0.02, 0)

-- AFTER TB
local grid = Instance.new("UIGridLayout")
grid.CellSize = UDim2.new(0, 70, 0, 70)   -- ขนาดแต่ละ cell (70x70 px)
grid.CellPadding = UDim2.new(0, 5, 0, 5)  -- ระยะห่างระหว่าง cell
grid.FillDirection = Enum.FillDirection.Horizontal
grid.SortOrder = Enum.SortOrder.Name
grid.Parent = tb
-- update visibility function for tb and its children
local function updateButtonsVisibility()
    local scale = tb.Size.X.Scale or 0

grid:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    tb.CanvasSize = UDim2.new(0, grid.AbsoluteContentSize.X, 0, grid.AbsoluteContentSize.Y)
end)
-- END TB

    -- ซ่อนปุ่มลูกถ้า scale เล็กกว่า 0.364
    if scale <= 0.364 then
        for _, child in ipairs(tb:GetChildren()) do
            if child:IsA("ImageButton") or child:IsA("TextButton") then
                child.Visible = false
            end
        end
    else
        for _, child in ipairs(tb:GetChildren()) do
            if child:IsA("ImageButton") or child:IsA("TextButton") then
                child.Visible = true
            end
        end
    end

    -- ซ่อน tb ทั้งกล่องเมื่อ scale == 0
    if scale <= 0 then
        tb.Visible = false
    else
        tb.Visible = true
    end
end

tb:GetPropertyChangedSignal("Size"):Connect(updateButtonsVisibility)

-- Settings button (on hr)
local Set = Instance.new("ImageButton")
Set.Name = "a2_Settings"
Set.Size = UDim2.new(0, 36, 0.8, 0)
Set.Image = "rbxassetid://85613740372383"
Set.BackgroundColor3 = Color3.fromRGB(18, 18, 21)
Set.BackgroundTransparency = 1
Set.Active = true
Set.Visible = false
Set.Parent = hr
createUICorner(Set, 1, 0)

-- Hamburger menu (hbm)
local hbm = Instance.new("ImageButton")
hbm.Name = "a3_HamburgerMenu"
hbm.Size = UDim2.new(0, 36, 0.8, 0)
hbm.Image = "rbxassetid://12214197591"
hbm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
hbm.BackgroundTransparency = 1
hbm.Active = true
hbm.Visible = false
hbm.Parent = hr
createUICorner(hbm, 1, 0)

-- Open/Close
local OC = Instance.new("ImageButton")
OC.Name = "a1_Open/Close"
OC.Size = UDim2.new(0, 36, 0.8, 0)
OC.Image = "rbxassetid://8877547836"
OC.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
OC.BackgroundTransparency = 0.8
OC.Active = true
OC.Visible = false
OC.Parent = hr
createUICorner(OC, 1, 0)

-- Wait1
local wa1 = Instance.new("Frame")
wa1.Name = "LoadFrame"
wa1.BackgroundTransparency = 1
wa1.Size = UDim2.new(0.8, 0, 1, 0)
wa1.Active = false
wa1.Visible = true
wa1.Parent = hr

-- Warning & Load
local wl = Instance.new("TextLabel")
wl.Name = "Warning & Load"
wl.BackgroundTransparency = 1
wl.Size = UDim2.new(1, 0, 1, 0)
wl.Text = "Not available for this experience."
wl.TextScaled = true
wl.Active = false
wl.TextColor3 = Color3.fromRGB(255, 255, 255)
wl.Visible = true
wl.Parent = wa1

-- ===== OC (Open/Close) wiring - REPLACEMENT =====
local OC_OPEN_IMAGE  = "rbxassetid://6993462605" -- image when OPEN (show Set/hbm)
local OC_CLOSE_IMAGE = "rbxassetid://6993472329"  -- image when CLOSED (hide Set/hbm)

-- target mtb X for "closed" (was 0.515 -> change to 0.48 as requested)
local MTB_X_CLOSED = 0.48
local MTB_X_OPEN   = 0 -- open => X = 0

-- hr sizes in px for open/close
local HR_WIDTH_OPEN  = 150
local HR_WIDTH_CLOSE = 44

-- safe setter for mtb position (uses tweenObject if available)
local function setMtbX(open, instant)
    local targetX = open and MTB_X_OPEN or MTB_X_CLOSED
    -- prefer existing mtb variable; fallback to searching inside menuGui
    local targetMtb = mtb or (menuGui and menuGui:FindFirstChild("TopBar", true))

    if OC and (OC:IsA("GuiObject")) then
        OC.Image = open and OC_OPEN_IMAGE or OC_CLOSE_IMAGE
    end

    if not targetMtb then
        return
    end

    local newPos = UDim2.new(targetX, 0, targetMtb.Position.Y.Scale, targetMtb.Position.Y.Offset)
    if instant then
        pcall(function() targetMtb.Position = newPos end)
    else
        pcall(function()
            if safeTween then
                safeTween(targetMtb, { Position = newPos }, 0.28, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            else
                tweenObject(targetMtb, { Position = newPos }, 0.28, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            end
        end)
    end
end

-- safe setter for hr width
local function setHrWidth(px, instant)
    if not hr then return end
    local newSize = UDim2.new(0, px, hr.Size.Y.Scale, hr.Size.Y.Offset)
    if instant then
        pcall(function() hr.Size = newSize end)
    else
        pcall(function()
            if safeTween then
                safeTween(hr, { Size = newSize }, 0.28, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            else
                tweenObject(hr, { Size = newSize }, 0.28, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
            end
        end)
    end
end

-- determine initial state from current UI (if Set/hbm visible => consider OPEN)
local ocState = false
if (Set and Set:IsA("GuiObject")) and Set.Visible then
    ocState = true
end

-- ensure OC image set
if OC and OC:IsA("ImageButton") then
    OC.Image = ocState and OC_OPEN_IMAGE or OC_CLOSE_IMAGE
end

-- function to apply the state
local function applyOCState(open, instant)
    ocState = open
    -- set mtb position
    setMtbX(open, instant)
    -- set hr size
    setHrWidth(open and HR_WIDTH_OPEN or HR_WIDTH_CLOSE, instant)
    -- toggle Set/hbm visibility (pcall to be safe)
    pcall(function()
        if Set and Set:IsA("GuiObject") then Set.Visible = open end
        if hbm and hbm:IsA("GuiObject") then hbm.Visible = open end
    end)
    -- update OC image
    if OC and OC:IsA("GuiObject") then
        OC.Image = open and OC_OPEN_IMAGE or OC_CLOSE_IMAGE
    end
end

-- initialize (instant)
applyOCState(ocState, true)

-- OC click toggles
if OC and OC:IsA("GuiObject") then
    OC.MouseButton1Click:Connect(function()
        -- toggle and animate
        ocState = not ocState
        applyOCState(ocState, false)
    end)
end

-- ===== main loop (HRP watcher) =====
local CHECK_INTERVAL = 0.12 -- ระยะเวลาเช็ค (วินาที)
local TIMEOUT = 8.5         -- ถ้าไม่มี HRP เกินค่านี้ให้ปิด UI (วินาที)

-- safe tween wrapper (ไม่ล่มถ้าหาก obj หาย)
local function safeTween(obj, props, time, style, dir)
    if not obj or not obj.Parent then return end
    pcall(function()
        tweenObject(obj, props, time, style, dir)
    end)
end

-- เก็บตำแหน่ง/ขนาดเริ่มต้นของ wa1/hr/mtb (ถ้ามี) เพื่อคืนค่าได้ตรงๆ
local wa1_initial_pos = nil
local hr_initial_size = nil
local mtb_initial_pos = nil
pcall(function()
    if wa1 then wa1_initial_pos = wa1.Position end
    if hr  then hr_initial_size = hr.Size end
    if mtb then mtb_initial_pos = mtb.Position end
end)

-- resolve UI refs (พยายามหา refs ที่เราเคยสร้างไว้)
local function resolveUI()
    -- ถ้าตัวแปร UI มีอยู่แล้วและยัง parent อยู่ ให้ return ทันที
    if tb and tb.Parent and hr and hr.Parent and Set and Set.Parent and hbm and hbm.Parent and OC and OC.Parent then
        return tb, hr, Set, hbm, OC, wa1, wl, background, mtb
    end
    local root = menuGui or expSettings or healthBar
    if root then
        local rc_tb = root:FindFirstChild("TopButtons", true)
        local rc_hr = root:FindFirstChild("Holder", true)
        local rc_Set = root:FindFirstChild("A_Settings", true)
        local rc_hbm = root:FindFirstChild("HamburgerMenu", true)
        local rc_OC  = root:FindFirstChild("A0_Open/Close", true)
        local rc_wa1 = root:FindFirstChild("LoadFrame", true)
        local rc_wl  = root:FindFirstChild("Warning & Load", true)
        local rc_bg  = root:FindFirstChild("Background", true)
        local rc_mtb = root:FindFirstChild("TopBar", true) -- ถ้ามี mtb อยู่ใน tree
        return rc_tb, rc_hr, rc_Set, rc_hbm, rc_OC, rc_wa1, rc_wl, rc_bg, rc_mtb
    end
    return nil
end

local ui_tb, ui_hr, ui_Set, ui_hbm, ui_OC, ui_wa1, ui_wl, ui_bg, ui_mtb = resolveUI()
local timerMissing = 0
local isOpen = false

local function characterHasHRP(plr)
    if not plr or not plr.Character then return false end
    local char = plr.Character
    if char:FindFirstChild("HumanoidRootPart") then return true end
    if char.PrimaryPart and char.PrimaryPart:IsA("BasePart") then return true end
    for _, c in ipairs(char:GetChildren()) do
        if c:IsA("BasePart") and (string.find(c.Name, "Root") or string.find(c.Name, "Humanoid")) then
            return true
        end
    end
    return false
end

task.spawn(function()
    while true do
        task.wait(CHECK_INTERVAL)

        -- พยายาม resolve refs ถ้ายังไม่มี
        if not (ui_tb and ui_hr and ui_Set and ui_hbm and ui_OC and ui_wa1) then
            ui_tb, ui_hr, ui_Set, ui_hbm, ui_OC, ui_wa1, ui_wl, ui_bg, ui_mtb = resolveUI()

            if not (ui_tb and ui_hr and ui_Set and ui_hbm and ui_OC) then
                -- ถ้า refs ยังไม่ครบ: เพิ่ม timerMissing แล้วข้ามการกระทำใด ๆ ที่ไปเปลี่ยน UI
                timerMissing = timerMissing + CHECK_INTERVAL
                if timerMissing >= TIMEOUT then
                    warn("[HRP-Watcher] UI missing for " .. math.floor(timerMissing) .. "s - waiting for UI")
                end
                -- ข้ามรอบนี้โดยไม่แก้ไขค่า wa1/mtb/อื่น ๆ
                continue
            else
                -- ถ้า resolve สำเร็จ ให้รีเซ็ต timerMissing เพื่อเริ่มตรวจ HRP ได้
                timerMissing = 0
            end
        end

        -- มี refs ครบแล้ว -> ตรวจ HRP ของผู้เล่น
        do
            local pl = Players.LocalPlayer
            local hasHRP = characterHasHRP(pl)

            if hasHRP then
                timerMissing = 0
                if not isOpen then
                    print("[HRP-Watcher] HRP detected -> opening UI")
                    -- ย้าย mtb/หรือ tb/ hr ในแบบที่คุณต้องการ (เช็คว่า ui_mtb มีไหม ถ้ามีก็ย้าย mtb)
                    if ui_mtb and ui_mtb.Parent then
                        safeTween(ui_mtb, { Position = UDim2.new(0.48, 0, ui_mtb.Position.Y.Scale, ui_mtb.Position.Y.Offset) }, 0.28, Enum.EasingStyle.Quad)
                    else
                        -- ถ้าไม่มี mtb ให้ย้าย tb แทน (ถ้านี่คือพฤติกรรมเดิม)
                        safeTween(ui_tb, { Position = UDim2.new(0,0,0,0) }, 0.28, Enum.EasingStyle.Quad)
                    end

                    safeTween(ui_hr, { Size = UDim2.new(0,44, ui_hr.Size.Y.Scale, ui_hr.Size.Y.Offset) }, 0.28)
                    pcall(function()
                        if ui_Set  then ui_Set.Visible  = false end
                        if ui_hbm then ui_hbm.Visible = false end
                        if ui_OC  then ui_OC.Visible  = true end
                    end)

                    -- ซ่อน wa1/wl ถ้ามันมีอยู่ (และอย่าพยายามเปลี่ยนตำแหน่งถ้ามันไม่มี)
                    if ui_wa1 and ui_wa1.Parent then
                        ui_wa1.Visible = false
                        -- ถ้าต้องการคืนตำแหน่งเริ่มต้นตอนเปิด ให้ทำแบบนี้ (ถ้าเก็บไว้ข้างบน)
                        if wa1_initial_pos then
                            pcall(function() safeTween(ui_wa1, { Position = wa1_initial_pos }, 0.22) end)
                        end
                    end

                    isOpen = true
                end
            else
                timerMissing = timerMissing + CHECK_INTERVAL
                if timerMissing >= TIMEOUT then
                    if isOpen then
                        print("[HRP-Watcher] HRP missing >"..TIMEOUT.."s -> closing UI")
                        -- ใช้ ui_mtb ถ้ามี มิฉะนั้นใช้ ui_tb
                        if ui_mtb and ui_mtb.Parent then
                            safeTween(ui_mtb, { Position = UDim2.new(0,0, -3, 0) }, 0.28) -- ถ้าต้องการย้าย Y ให้ใช้ค่าที่ถูกต้อง
                        else
                            safeTween(ui_tb, { Position = UDim2.new(-5,0, ui_tb.Position.Y.Scale, ui_tb.Position.Y.Offset) }, 0.28)
                        end

                        safeTween(ui_hr, { Size = UDim2.new(0,34, ui_hr.Size.Y.Scale, ui_hr.Size.Y.Offset) }, 0.28)
                        pcall(function()
                            if ui_Set  then ui_Set.Visible  = false end
                            if ui_hbm then ui_hbm.Visible = false end
                            if ui_OC  then ui_OC.Visible  = false end
                        end)

                        -- ถ้าต้องการแสดง wa1 เมื่อไม่มี HRP (เช่นเป็น warning) ให้ทำตรงนี้
                        if ui_wa1 and ui_wa1.Parent then
                            ui_wa1.Visible = true
                            -- ถ้าต้องการให้ wa1 อยู่ตำแหน่งเฉพาะเมื่อปิด ให้เซ็ตตำแหน่งเท่านั้นเมื่อ ui_wa1 มีจริง
                            -- ตัวอย่าง: ย้าย wa1 ไปตำแหน่งปิด (ถ้ากำหนด)
                            -- safeTween(ui_wa1, { Position = UDim2.new(0.515, 0, ui_wa1.Position.Y.Scale, ui_wa1.Position.Y.Offset) }, 0.28)
                        end

                        isOpen = false
                    end
                end
            end
        end
    end
end)

-- ========= END ==========

-- Background panel (start OFFscreen to right)
local background = Instance.new("Frame")
background.Name = "Background"
background.Size = UDim2.new(0.35, 0, 0.9, 0)
background.Position = UDim2.new(1, 0, 0.05, 0) -- offscreen
background.BackgroundColor3 = Color3.new(0, 0, 0)
background.BackgroundTransparency = 0.5
background.Active = true
background.Parent = menuGui
createUICorner(background, 0.02, 0)

-- Experience image (thumbnail)
local experienceImage = Instance.new("ImageLabel")
experienceImage.Name = "ExperienceImage"
experienceImage.Size = UDim2.new(0.3, 0, 0.235, 0)
experienceImage.Position = UDim2.new(0.02, 0, 0.02, 0)
experienceImage.BackgroundTransparency = 0.5
experienceImage.Image = "rbxassetid://15057690464" -- default fallback
experienceImage.Parent = background
createUICorner(experienceImage, 0.05, 0)

-- Experience name label
local experienceName = Instance.new("TextLabel")
experienceName.Name = "ExperienceName"
experienceName.Size = UDim2.new(0.65, 0, 0.235, 0)
experienceName.Position = UDim2.new(0.34, 0, 0.02, 0)
experienceName.BackgroundTransparency = 1
experienceName.Text = "Getting API experience..."
experienceName.TextScaled = true
experienceName.TextColor3 = Color3.new(1, 1, 1)
experienceName.TextStrokeTransparency = 0
experienceName.Parent = background

-- Settings frame inside background
local settings = Instance.new("Frame")
settings.Name = "Settings"
settings.Size = UDim2.new(0.96, 0, 0.7, 0)
settings.Position = UDim2.new(0.02, 0, 0.28, 0)
settings.BackgroundColor3 = Color3.new(0, 0, 0)
settings.BackgroundTransparency = 0.5
settings.Active = true
settings.Parent = background
createUICorner(settings, 0.02, 0)

-- Pmax (players info)
local pmax = Instance.new("Folder"); pmax.Name = "Pmax"; pmax.Parent = settings
local playersLabel = Instance.new("TextLabel")
playersLabel.Name = "Players"; playersLabel.Size = UDim2.new(0.36,0,0.05,0)
playersLabel.Position = UDim2.new(0.02,0,0.02,0)
playersLabel.BackgroundColor3 = Color3.new(1,1,1); playersLabel.BackgroundTransparency = 0.2
playersLabel.Text = "Player :"; playersLabel.TextColor3 = Color3.new(0,0,0)
playersLabel.TextScaled = true; playersLabel.Parent = pmax; createUICorner(playersLabel,0.3,0)

local playerCount = Instance.new("TextLabel")
playerCount.Name = "PlayerCount"; playerCount.Size = UDim2.new(0.58,0,0.05,0)
playerCount.Position = UDim2.new(0.4,0,0.02,0)
playerCount.BackgroundColor3 = Color3.new(1,1,1); playerCount.BackgroundTransparency = 0.2
playerCount.Text = "0/0"; playerCount.TextColor3 = Color3.new(0,0,0)
playerCount.TextScaled = true; playerCount.Parent = pmax; createUICorner(playerCount,0.3,0)

-- SeeAll button
local seeAll = Instance.new("TextButton")
seeAll.Name = "SeeAll"
seeAll.Size = UDim2.new(0.96,0,0.05,0)
seeAll.Position = UDim2.new(0.02,0,0.08,0)
seeAll.BackgroundTransparency = 0.2
seeAll.TextScaled = true
seeAll.Text = "Open Roblox Settings"
seeAll.Parent = pmax
createUICorner(seeAll,0.3,0)

-- Buttons folder (Leave / Reset / Resume)
local Bs = Instance.new("Folder"); Bs.Name = "Buttons"; Bs.Parent = settings

local LE = Instance.new("TextButton")
LE.Name="Leave"; LE.Size=UDim2.new(0.96,0,0.05,0); LE.Position=UDim2.new(0.02,0,0.94,0)
LE.BackgroundTransparency=0.2; LE.BackgroundColor3=Color3.fromRGB(255,0,0)
LE.TextScaled=true; LE.Text="Leave The Experience"; LE.TextColor3=Color3.fromRGB(255,255,255)
LE.Parent = Bs; createUICorner(LE,0.3,0)

local Re = Instance.new("TextButton")
Re.Name="Reset character"; Re.Size=UDim2.new(0.96,0,0.05,0); Re.Position=UDim2.new(0.02,0,0.88,0)
Re.BackgroundTransparency=0.2; Re.BackgroundColor3=Color3.fromRGB(255,84,84)
Re.TextScaled=true; Re.Text="Reset character"; Re.TextColor3=Color3.fromRGB(255,255,255)
Re.Parent = Bs; createUICorner(Re,0.3,0)

local Rm = Instance.new("TextButton")
Rm.Name="Resume"; Rm.Size=UDim2.new(0.96,0,0.05,0); Rm.Position=UDim2.new(0.02,0,0.82,0)
Rm.BackgroundTransparency=0.2; Rm.BackgroundColor3=Color3.fromRGB(170,170,170)
Rm.TextScaled=true; Rm.Text="Resume"; Rm.TextColor3=Color3.fromRGB(255,255,255)
Rm.Parent = Bs; createUICorner(Rm,0.3,0)

-- Lines and toggles container
local L1 = Instance.new("Frame"); L1.Name="Line"; L1.Position=UDim2.new(0.02,0,0.15,0); L1.Size=UDim2.new(0.96,0,0.01,0); L1.Parent = settings
local L2 = Instance.new("Frame"); L2.Name="Line2"; L2.Position=UDim2.new(0.02,0,0.79,0); L2.Size=UDim2.new(0.96,0,0.01,0); L2.Parent = settings

local BFrame = Instance.new("Frame")
BFrame.Name = "B_Frame"; BFrame.Position = UDim2.new(0.02,0,0.18,0); BFrame.Size = UDim2.new(0.96,0,0.6,0)
BFrame.BackgroundTransparency = 1; BFrame.Parent = settings

local UIList = Instance.new("UIListLayout"); UIList.Padding = UDim.new(0.01,0); UIList.Parent = BFrame

-- Toggle builder
local toggleCount = 0
local function createToggle(parent, text, callback, defaultState)
    toggleCount += 1

    local f = Instance.new("Frame")
    f.Name = "Frame" .. toggleCount
    f.Size = UDim2.new(1,0,0.1,0)
    f.BackgroundTransparency = 0
    f.Parent = parent
    createUICorner(f, 0.3, 0)

    local bar = Instance.new("Frame")
    bar.Name = "Bar"
    bar.Size = UDim2.new(0.4,0,1,0)
    bar.Position = UDim2.new(0.6,0,0,0)
    bar.BackgroundColor3 = Color3.fromRGB(66,66,66)
    bar.Parent = f
    createUICorner(bar,0.3,0)

    local but = Instance.new("TextButton")
    but.Name = "ToggleButton"
    but.Size = UDim2.new(0.5,0,1,0)
    but.Parent = bar
    createUICorner(but,0.3,0)

    local txt = Instance.new("TextLabel")
    txt.Name = "Label"
    txt.Size = UDim2.new(0.6,0,1,0)
    txt.BackgroundTransparency = 1
    txt.TextScaled = true
    txt.TextXAlignment = Enum.TextXAlignment.Left
    txt.Text = text
    txt.Parent = f

    -- Toggle Logic
    local toggle = defaultState or false
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

    local function updateToggle(state, instant)
        toggle = state
        local props
        if toggle then
            props = {
                Position = UDim2.new(0,0,0,0),
                BackgroundColor3 = Color3.fromRGB(0,200,0)
            }
            but.Text = "ON"
        else
            props = {
                Position = UDim2.new(0.5,0,0,0),
                BackgroundColor3 = Color3.fromRGB(255,0,0)
            }
            but.Text = "OFF"
        end
        if instant then
            for k,v in pairs(props) do
                pcall(function() but[k] = v end)
            end
        else
            pcall(function() TweenService:Create(but, tweenInfo, props):Play() end)
        end
        if callback then
            pcall(callback, toggle)
        end
    end

    updateToggle(toggle, true)

    but.MouseButton1Click:Connect(function()
        updateToggle(not toggle)
    end)

    return f
end

-- ======== TOGGLE SWITCHS ===========

-- ValueLabels toggle (safe wait)
local valueGuiOK, ValueGui = pcall(function()
    return CoreGui:WaitForChild("TopBarApp"):WaitForChild("TopBarApp"):WaitForChild("UnibarLeftFrame"):WaitForChild("HealthBar"):WaitForChild("ValueFolder"):WaitForChild("ValueGui")
end)

createToggle(BFrame, "ValueLabels", function(state)
    if valueGuiOK and ValueGui then
        pcall(function() ValueGui.Enabled = state end)
    end
end, (valueGuiOK and ValueGui and ValueGui.Enabled) or true)

-- Save / restore Lighting backup
local lightingBackup = {}
local function saveLightingSettings()
    lightingBackup = {
        ClockTime = Lighting.ClockTime,
        GeographicLatitude = Lighting.GeographicLatitude,
        ColorShift_Bottom = Lighting.ColorShift_Bottom,
        ColorShift_Top = Lighting.ColorShift_Top,
        Ambient = Lighting.Ambient
    }
end
local function restoreLightingSettings()
    if lightingBackup.ClockTime ~= nil then
        pcall(function()
            Lighting.ClockTime = lightingBackup.ClockTime
            Lighting.GeographicLatitude = lightingBackup.GeographicLatitude
            Lighting.ColorShift_Bottom = lightingBackup.ColorShift_Bottom
            Lighting.ColorShift_Top = lightingBackup.ColorShift_Top
            Lighting.Ambient = lightingBackup.Ambient
        end)
    end
end

-- Shaders toggle
createToggle(BFrame, "Shaders - Recommend graphics 5+", function(state)
    if state then
        pcall(saveLightingSettings)
        -- Sky
        if not Lighting:FindFirstChild("Shader-sky") then
            local sky = Instance.new("Sky")
            sky.Name = "Shader-sky"
            sky.SkyboxBk = "rbxassetid://600830446"
            sky.SkyboxDn = "rbxassetid://600831635"
            sky.SkyboxFt = "rbxassetid://600832720"
            sky.SkyboxLf = "rbxassetid://600886090"
            sky.SkyboxRt = "rbxassetid://600833862"
            sky.SkyboxUp = "rbxassetid://600835177"
            sky.SunTextureId = "rbxassetid://6281397906"
            sky.MoonTextureId = "rbxassetid://102013024637283"
            sky.SunAngularSize = 11
            sky.MoonAngularSize = 11
            sky.Parent = Lighting
        end
        -- DepthOfField
        if not Lighting:FindFirstChild("Shader-Field") then
            local dof = Instance.new("DepthOfFieldEffect")
            dof.Name = "Shader-Field"; dof.InFocusRadius = 25; dof.NearIntensity = 0.15; dof.Parent = Lighting
        end
        -- ColorCorrection
        if not Lighting:FindFirstChild("Shader-Correction") then
            local cc = Instance.new("ColorCorrectionEffect")
            cc.Name = "Shader-Correction"; cc.Brightness = -0.1; cc.Contrast = 0.3; cc.Parent = Lighting
        end
        -- SunRays
        if not Lighting:FindFirstChild("Shader-SunRays") then
            local sr = Instance.new("SunRaysEffect")
            sr.Name = "Shader-SunRays"; sr.Intensity = 0.103; sr.Spread = 0.88; sr.Parent = Lighting
        end
        -- Atmosphere (safe create)
        if not Lighting:FindFirstChild("Shader-Atmosphere") then
            pcall(function()
                local a = Instance.new("Atmosphere")
                a.Name = "Shader-Atmosphere"
                a.Density = 0.419
                pcall(function() a.Color = Color3.fromRGB(75,47,29) end)
                a.Parent = Lighting
            end)
        end
        -- lighting props
        Lighting.ClockTime = 6.509
        Lighting.GeographicLatitude = 33.91
        Lighting.ColorShift_Bottom = Color3.fromRGB(0,0,0)
        Lighting.ColorShift_Top = Color3.fromRGB(255,166,0)
        Lighting.Ambient = Color3.fromRGB(75,47,20)
    else
        local targets = {"Shader-sky","Shader-Field","Shader-Correction","Shader-SunRays","Shader-Atmosphere"}
        for _, name in ipairs(targets) do
            local obj = Lighting:FindFirstChild(name)
            if obj then pcall(function() obj:Destroy() end) end
        end
        pcall(restoreLightingSettings)
    end
end, false)

-- ต้องมี service เหล่านี้
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer

-- เก็บ coroutine / task ของ rainbow per-part เพื่อให้เราหยุดได้
local _rainbowTasks = {}

-- ลิสต์ part ที่จะพยายามหา (ลำดับความสำคัญ)
local ATTACH_CANDIDATES = {
    "HumanoidRootPart",
    "LowerTorso",
    "UpperTorso",
    "Torso",
    "Head"
}

-- หา part ที่จะ parent light ให้ (คืน BasePart หรือ nil)
local function findAttachPart(character)
    if not character then return nil end
    for _, name in ipairs(ATTACH_CANDIDATES) do
        local p = character:FindFirstChild(name)
        if p and p:IsA("BasePart") then
            return p
        end
    end
    return nil
end

-- สต็อกชื่อ light
local LIGHT_NAME = "Experience_Lighter"

-- หยุด rainbow loop สำหรับ part นั้น (ถ้ามี)
local function stopRainbowFor(part)
    if not part then return end
    local taskFlag = _rainbowTasks[part]
    if taskFlag and taskFlag._stop then
        taskFlag._stop = true
        _rainbowTasks[part] = nil
    end
end

-- สร้างหรือเปิด light
-- params:
--  state: boolean (true = on, false = off)
--  rainbow: boolean (true => ไล่สี)
--  opts (optional): table { Brightness = number, Range = number, Color = Color3 }
local function setLighterForCharacter(char, state, rainbow, opts)
    if not char then return false, "no char" end
    local attach = findAttachPart(char)
    if not attach then return false, "no attach part found" end

    -- ถ้ามี light อยู่แล้ว จัดการตาม state
    local existing = attach:FindFirstChild(LIGHT_NAME)
    if not state then
        -- ปิด/ลบ
        if existing then
            stopRainbowFor(attach)
            existing:Destroy()
        end
        return true, "turned off"
    end

    -- เปิด: สร้าง light ถ้ายังไม่มี
    if not existing then
        local light = Instance.new("PointLight")
        light.Name = LIGHT_NAME
        light.Brightness = (opts and opts.Brightness) or 2
        light.Range = (opts and opts.Range) or 25
        light.Color = (opts and opts.Color) or Color3.new(1,1,1)
        -- PointLight ไม่มี Angle property — เป็น omnidirectional อยู่แล้ว (เทียบกับ SpotLight)
        light.Parent = attach

        -- ถ้าผู้ใช้ทำลาย part เราควรหยุด task ด้วย (เช็ค AncestryChanged)
        attach.AncestryChanged:Connect(function(child, parent)
            if not parent then
                -- part ถูกลบ -> หยุด rainbow (ถ้ามี)
                stopRainbowFor(attach)
            end
        end)
    else
        -- update properties ถ้ามี
        existing.Brightness = (opts and opts.Brightness) or existing.Brightness
        existing.Range = (opts and opts.Range) or existing.Range
        existing.Color = (opts and opts.Color) or existing.Color
    end

    -- rainbow handling
    stopRainbowFor(attach) -- ทำความสะอาดก่อน
    if rainbow then
        -- สร้าง task flag เพื่อให้หยุดได้
        local flag = { _stop = false }
        _rainbowTasks[attach] = flag
        task.spawn(function()
            local t0 = tick()
            while not flag._stop and attach.Parent do
                local h = (tick() - t0) * 0.12 -- speed factor (ปรับได้)
                local color = Color3.fromHSV(h % 1, 1, 1)
                local light = attach:FindFirstChild(LIGHT_NAME)
                if light then
                    -- pcall ป้องกัน error ถ้า light ถูกทำลายในระหว่าง loop
                    pcall(function() light.Color = color end)
                else
                    break
                end
                task.wait(0.06)
            end
        end)
    else
        -- ตั้งสีปกติ (ขาว) เมื่อไม่ใช่ rainbow
        local light = attach:FindFirstChild(LIGHT_NAME)
        if light then
            pcall(function() light.Color = Color3.fromRGB(255,255,255) end)
        end
    end

    return true, "turned on"
end

-- ตัวช่วย: toggle สำหรับ local player (เรียกจาก toggle callback)
local function toggleForLocalPlayer(state, rainbow)
    local pl = Players.LocalPlayer
    if not pl then return end
    local char = pl.Character or pl.CharacterAdded:Wait()
    local ok, msg = pcall(function()
        return setLighterForCharacter(char, state, rainbow)
    end)
    if not ok then
        warn("[Lighter] failed:", msg)
    end
end

createToggle(BFrame, "White Light", function(state)
    toggleForLocalPlayer(state, false) -- ปกติ ขาว
end, false)

createToggle(BFrame, "RGB Light", function(state)
    toggleForLocalPlayer(state, true) -- RGB (เดิม rainbow)
end, false)





-- LocalScript: ESP full info (Username, Age, Join, Health, Studs, Team, PlayerID)
-- วางใน StarterPlayerScripts หรือที่ client เห็นได้

--!strict
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

local LOCAL = Players.LocalPlayer
local UPDATE_RATE = 0.2      -- ทุก ๆ 0.2 วินาที อัพเดตข้อมูล (text, studs, health)
local BLINK_INTERVAL = 0.05  -- กระพริบทุก 0.05 วินาที (เมื่อเลือดต่ำ)
local HEALTH_BLINK_RATIO = 0.25 -- ถ้าน้อยกว่าส่วนนี้ให้กระพริบ

-- cache creation dates fetched from API
local userCreationCache = {}

-- container for esp data per player
type EspRecord = {
    player: Player,
    highlight: Instance?,
    billboard: BillboardGui?,
    textLabel: TextLabel?,
    charConn: RBXScriptConnection?,
    humConn: RBXScriptConnection?,
    removed: boolean
}
local espByPlayer : {[number] : EspRecord} = {}

-- helper: parse ISO8601-ish date string -> formatted Join (YYYY-MM-DD) and Age (years)
local function parseCreatedIso(iso)
    if not iso or type(iso) ~= "string" then
        return "Unknown", "Unknown"
    end
    -- Expect like "2011-06-20T17:29:40.52Z"
    local y,m,d = iso:match("^(%d+)%-(%d+)%-(%d+)")
    if not (y and m and d) then
        return iso, "Unknown"
    end
    local joinDate = string.format("%s/%s/%s", d, m, y) -- DD/MM/YYYY (ปรับตามชอบ)
    -- compute age in years + months
    local function toTime(tstr)
        -- rough parse to os.time (UTC)
        local Y = tonumber(y) or 0
        local M = tonumber(m) or 1
        local D = tonumber(d) or 1
        return os.time({year=Y, month=M, day=D, hour=0})
    end
    local createdTime = toTime(iso)
    local now = os.time()
    local secs = now - createdTime
    local days = math.floor(secs / 86400)
    local years = math.floor(days / 365)
    local months = math.floor((days - years*365) / 30)
    local ageStr = string.format("%dy %dm", years, months)
    return ageStr, joinDate
end

-- fetch creation date from Roblox API (client-side; may fail due to Http permission)
local function fetchUserCreatedDate(userId : number)
    if userCreationCache[userId] then
        return userCreationCache[userId]
    end
    local url = "https://users.roblox.com/v1/users/" .. tostring(userId)
    local ok, body = pcall(function()
        return HttpService:GetAsync(url, true)
    end)
    if not ok or not body then
        userCreationCache[userId] = nil
        return nil
    end
    local ok2, decoded = pcall(function() return HttpService:JSONDecode(body) end)
    if not ok2 or type(decoded) ~= "table" or not decoded.created then
        userCreationCache[userId] = nil
        return nil
    end
    userCreationCache[userId] = decoded.created -- ISO string
    return decoded.created
end

-- create highlight and billboard for a given character
local function createESPForCharacter(player : Player, character : Model) : EspRecord
    local rec : EspRecord = {
        player = player,
        highlight = nil,
        billboard = nil,
        textLabel = nil,
        charConn = nil,
        humConn = nil,
        removed = false
    }

    -- Highlight
    local success, highlight = pcall(function()
        local h = Instance.new("Highlight")
        h.Adornee = character
        h.Parent = workspace -- safe parent (or CoreGui if you prefer, but Highlight works in workspace)
        h.FillTransparency = 0.8
        h.OutlineTransparency = 0
        return h
    end)
    if success and highlight then
        rec.highlight = highlight
    end

    -- BillboardGui
    local hrp = character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso") or character.PrimaryPart
    if hrp then
        local bg = Instance.new("BillboardGui")
        bg.Name = "ESP_Billboard"
        bg.Adornee = hrp
        bg.Size = UDim2.new(0,250,0,40)
        bg.StudsOffset = Vector3.new(0, 3, 0)
        bg.AlwaysOnTop = true
        bg.Parent = workspace -- keep in workspace; it's fine because Adornee points to hrp
        local lbl = Instance.new("TextLabel")
        lbl.Name = "ESP_Label"
        lbl.Size = UDim2.new(1,0,1,0)
        lbl.BackgroundTransparency = 1
        lbl.TextScaled = true
        lbl.TextStrokeTransparency = 0
        lbl.Text = ""
        lbl.TextColor3 = Color3.fromRGB(255,255,255)
        lbl.Font = Enum.Font.SourceSansBold
        lbl.Parent = bg

        rec.billboard = bg
        rec.textLabel = lbl
    end

    return rec
end

local function cleanupEsp(rec : EspRecord)
    if not rec then return end
    rec.removed = true
    if rec.charConn then pcall(function() rec.charConn:Disconnect() end) end
    if rec.humConn then pcall(function() rec.humConn:Disconnect() end) end
    if rec.highlight and rec.highlight.Parent then pcall(function() rec.highlight:Destroy() end) end
    if rec.billboard and rec.billboard.Parent then pcall(function() rec.billboard:Destroy() end) end
    espByPlayer[rec.player.UserId] = nil
end

-- create or refresh esp when character added
local function onCharacterAdded(player : Player, character : Model)
    if espByPlayer[player.UserId] then
        -- cleanup previous (if any)
        cleanupEsp(espByPlayer[player.UserId])
    end
    local rec = createESPForCharacter(player, character)
    espByPlayer[player.UserId] = rec

    -- optionally track humanoid changes (for health)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        rec.humConn = humanoid:GetPropertyChangedSignal("Health"):Connect(function() end) -- placeholder: update loop does heavy lifting
    end
end

-- update one player's display text & highlight color & blink logic
local blinkTimers : {[number] = number} = {} -- accumulator per player

local function updateOne(rec : EspRecord, dt)
    if not rec or rec.removed then return end
    local player = rec.player
    local char = player.Character
    if not char then
        -- ensure hidden if no character
        if rec.highlight then rec.highlight.Parent = workspace end
        if rec.billboard and rec.billboard.Parent then rec.billboard.Enabled = false end
        return
    end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    local hrp = char:FindFirstChild("HumanoidRootPart") or char.PrimaryPart

    -- compute team color & team name
    local teamColor = Color3.fromRGB(200,200,200)
    local teamName = "Neutral"
    if player.Team then
        local tc = player.Team.TeamColor
        if tc then teamColor = tc.Color end
        if player.Team.Name and player.Team.Name ~= "" then teamName = player.Team.Name end
    end

    -- health values
    local health = 0
    local maxH = 100
    if humanoid then
        health = humanoid.Health or 0
        maxH = humanoid.MaxHealth or maxH
    end

    local healthRatio = (maxH > 0) and (health / maxH) or 0

    -- studs: distance to local player
    local studs = 0.0
    local localHr = LOCAL.Character and (LOCAL.Character:FindFirstChild("HumanoidRootPart") or LOCAL.Character.PrimaryPart)
    if hrp and localHr and hrp.Position and localHr.Position then
        studs = (hrp.Position - localHr.Position).Magnitude
    end

    -- fetch createdAt (cached)
    local createdIso = userCreationCache[player.UserId]
    if not createdIso then
        -- try to fetch async (pcall) but don't block main loop; call in spawn
        task.spawn(function()
            local iso = fetchUserCreatedDate(player.UserId)
            if iso then
                -- put into cache
                userCreationCache[player.UserId] = iso
            end
        end)
    end
    local ageStr, joinDate = "Unknown", "Unknown"
    if createdIso then
        ageStr, joinDate = parseCreatedIso(createdIso)
    else
        -- if not cached yet, show "Loading..."
        ageStr = "Loading..."
        joinDate = "Loading..."
    end

    -- update billboard text
    if rec.textLabel and rec.textLabel.Parent then
        local t = string.format(
            "@%s\nAge: %s\nJoin: %s\nHealth: %.2f / %.2f\nStuds: %.2f\nTeam: %s\nID: %d",
            player.Name or "Unknown",
            ageStr or "Unknown",
            joinDate or "Unknown",
            health or 0,
            maxH or 0,
            studs or 0,
            teamName or "Neutral",
            player.UserId
        )
        rec.textLabel.Text = t
        -- set text color by team (per request)
        rec.textLabel.TextColor3 = teamColor
    end

    -- highlight color
    if rec.highlight then
        rec.highlight.FillColor = teamColor
        rec.highlight.OutlineColor = teamColor
        rec.highlight.FillTransparency = 0.8
        rec.highlight.OutlineTransparency = 0
    end

    -- blinking when low health (alternate between white and team color)
    if healthRatio <= HEALTH_BLINK_RATIO then
        blinkTimers[player.UserId] = (blinkTimers[player.UserId] or 0) + dt
        if blinkTimers[player.UserId] >= BLINK_INTERVAL then
            blinkTimers[player.UserId] = 0
            -- flip color
            if rec.textLabel then
                local cur = rec.textLabel.TextColor3
                if cur == Color3.fromRGB(255,255,255) then
                    rec.textLabel.TextColor3 = teamColor
                else
                    rec.textLabel.TextColor3 = Color3.fromRGB(255,255,255)
                end
            end
            if rec.highlight then
                local curC = rec.highlight.FillColor
                if curC == Color3.fromRGB(255,255,255) then
                    rec.highlight.FillColor = teamColor
                    rec.highlight.OutlineColor = teamColor
                else
                    rec.highlight.FillColor = Color3.fromRGB(255,255,255)
                    rec.highlight.OutlineColor = Color3.fromRGB(255,255,255)
                end
            end
        end
    else
        -- not low health -> ensure normal color
        blinkTimers[player.UserId] = 0
        if rec.textLabel then rec.textLabel.TextColor3 = teamColor end
        if rec.highlight then rec.highlight.FillColor = teamColor; rec.highlight.OutlineColor = teamColor end
    end

    -- ensure billboard enabled
    if rec.billboard then rec.billboard.Enabled = true end
end

-- spawn update loop
do
    local accum = 0.0
    local blinkAccum = 0.0
    RunService.Heartbeat:Connect(function(dt)
        accum = accum + dt
        blinkAccum = blinkAccum + dt
        if accum >= UPDATE_RATE then
            accum = 0
            -- update all records
            for userId, rec in pairs(espByPlayer) do
                pcall(updateOne, rec, accum)
            end
        end
        -- we still want blink timing fine-grained; call with dt (small) for smoothness
        -- handle blink via updateOne's dt param if needed (we passed accum above); we'll also call small update for blink
        if blinkAccum >= BLINK_INTERVAL then
            local tiny = blinkAccum
            blinkAccum = 0
            for userId, rec in pairs(espByPlayer) do
                pcall(updateOne, rec, tiny)
            end
        end
    end)
end

-- handle player joins/leaves & character added
local function onPlayerAdded(p : Player)
    -- create esp when their character spawns
    local function charReady(char)
        pcall(onCharacterAdded, p, char)
    end
    if p.Character then
        charReady(p.Character)
    end
    p.CharacterAdded:Connect(charReady)
end

local function onPlayerRemoving(p : Player)
    local rec = espByPlayer[p.UserId]
    if rec then
        cleanupEsp(rec)
    end
end

-- init existing players (excluding local if you want)
for _, p in ipairs(Players:GetPlayers()) do
    if p ~= LOCAL then
        onPlayerAdded(p)
    end
end
Players.PlayerAdded:Connect(function(p) onPlayerAdded(p) end)
Players.PlayerRemoving:Connect(function(p) onPlayerRemoving(p) end)

-- cleanup on script destroy (optional)
script.Destroying:Connect(function()
    for _, rec in pairs(espByPlayer) do
        cleanupEsp(rec)
    end
end)

print("[ESP] initialized: showing Username, Age, Join, Health, Studs, Team, ID (real-time).")





-- ============== IMAGE BUTTONS ==============
-- helper: ImageButton creation (parented to tb by default)
local function createImageButton(name, r, g, b, bt, imageId, visible, parentFrame)
    parentFrame = parentFrame or tb
    local im = Instance.new("ImageButton")
    im.Name = tostring(name)
    im.Size = UDim2.new(0, 70, 0, 70)
    im.BackgroundTransparency = bt or 1
    im.BackgroundColor3 = Color3.fromRGB(r or 255, g or 255, b or 255)
    im.Visible = (visible ~= false)
    if imageId then
        local idstr = tostring(imageId)
        if idstr:match("^rbxassetid://") then
            im.Image = idstr
        else
            im.Image = "rbxassetid://" .. idstr
        end
    end
    im.Parent = parentFrame
    createUICorner(im, 1, 0)
    return im
end

-- CTB1
local ctb1 = createImageButton("INF YIELD", 50, 50, 50, 0.2, "116464551513962", false)
ctb1.MouseButton1Click:Connect(function()
    -- user asked for local script -> so call loadstring (note: doing external loadstring has security implications)
    pcall(function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    end)
end)

-- CTB2
local ctb2 = createImageButton("Dex", 50, 50, 50, 0.2, "102148729694907", false)
ctb2.MouseButton1Click:Connect(function()
    pcall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/MITUMAxDev/Tools/refs/heads/main/Dex-Explorer.lua"))()
    end)
end)

-- CTB3
local ctb3 = createImageButton("Keyboard", 50, 50, 50, 0.2, "76210662677344", false)
ctb3.MouseButton1Click:Connect(function()
    pcall(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Xxtan31/Ata/main/deltakeyboardcrack.txt", true))()
    end)
end)

-- ===== TEXT BUTTONS =======
-- helper: TextButton creation (parented to tb by default)
local function createTextButton(name, r, g, b, bt, text, scaled, visible, tr, tg, tb2, parentFrame)
    parentFrame = parentFrame or tb
    local txtb = Instance.new("TextButton")
    txtb.Name = tostring(name)
    -- fixed size: width 34 px (avoid stretching), full height fraction
    txtb.Size = UDim2.new(0, 70, 0, 70)
    txtb.BackgroundTransparency = bt or 1
    txtb.BackgroundColor3 = Color3.fromRGB(r or 255, g or 255, b or 255)
    txtb.Visible = (visible ~= false)
    txtb.Text = tostring(text or "")
    -- text color separate (defaults to white)
    txtb.TextColor3 = Color3.fromRGB(tr or 255, tg or 255, tb2 or 255)
    txtb.Font = Enum.Font.Legacy
    txtb.TextScaled = (scaled ~= false)
    txtb.Parent = parentFrame
    createUICorner(txtb, 1, 0)
    return txtb
end

-- ============== Background open/close functions ==============
local BG_X_ON = 0.65
local BG_X_OFF = 1
local function backgroundIsOpen()
    return math.abs(background.Position.X.Scale - BG_X_ON) < 0.01
end
local function setBackgroundState(open, instant)
    local target = open and BG_X_ON or BG_X_OFF
    local newPos = UDim2.new(target, 0, background.Position.Y.Scale, 0)
    if instant then
        background.Position = newPos
    else
        tweenObject(background, { Position = newPos }, 0.32, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    end
    pcall(function()
        if open then tweenObject(Set, { Rotation = 0 }, 0.22) else tweenObject(Set, { Rotation = 180 }, 0.22) end
    end)
end

Set.MouseButton1Click:Connect(function()
    setBackgroundState(not backgroundIsOpen(), false)
end)

-- ============== Thumbnail + ExperienceName load ==========
pcall(function()
    local ok, info = pcall(function() return MarketplaceService:GetProductInfo(game.PlaceId) end)
    if ok and type(info) == "table" then
        if info.IconImageAssetId and info.IconImageAssetId ~= 0 then
            experienceImage.Image = "rbxassetid://" .. tostring(info.IconImageAssetId)
        else
            -- try GetGameThumbnailAsync fallback
            local sOk, content = pcall(function()
                return Players:GetGameThumbnailAsync(game.PlaceId, Enum.ThumbnailType.Icon, Enum.ThumbnailSize.Size512x512)
            end)
            if sOk and type(content) == "string" and #content > 4 then
                experienceImage.Image = content
            else
                experienceImage.Image = "rbxassetid://15057690464"
            end
        end
        if info.Name then experienceName.Text = tostring(info.Name) end
    else
        -- fallback: try thumbnail call directly
        local sOk, content = pcall(function()
            return Players:GetGameThumbnailAsync(game.PlaceId, Enum.ThumbnailType.Icon, Enum.ThumbnailSize.Size512x512)
        end)
        if sOk and type(content) == "string" and #content > 4 then
            experienceImage.Image = content
        else
            experienceImage.Image = "rbxassetid://15057690464"
        end
        pcall(function() experienceName.Text = tostring(game.Name or ("Place " .. tostring(game.PlaceId))) end)
    end
end)

-- ============== playerCount realtime ==========
local function updatePlayerCounter()
    local count = #Players:GetPlayers()
    local maxPlayers = Players.MaxPlayers or 0
    playerCount.Text = tostring(count) .. "/" .. tostring(maxPlayers)
end
updatePlayerCounter()
Players.PlayerAdded:Connect(updatePlayerCounter)
Players.PlayerRemoving:Connect(updatePlayerCounter)
do
    local tick = 0
    RunService.Heartbeat:Connect(function(dt)
        tick += dt
        if tick >= 2 then tick = 0 updatePlayerCounter() end
    end)
end

-- ============== SeeAll: open Roblox settings and close background ==========
local function tryOpenRobloxMenu()
    -- try RobloxGui path first (set Visible)
    local ok, settingsShield = pcall(function()
        local rg = CoreGui:FindFirstChild("RobloxGui")
        if not rg then return nil end
        local sc = rg:FindFirstChild("SettingsClippingShield") or rg:FindFirstChild("SettingsShield")
        if not sc then return nil end
        local shield = sc:FindFirstChild("SettingsShield") or sc:FindFirstChild("Settings") or sc
        if shield then
            local menuContainer = shield:FindFirstChild("MenuContainer") or shield:FindFirstChild("SettingsMenu")
            if menuContainer then
                menuContainer.Visible = true
                return true
            end
        end
        return nil
    end)
    if ok and settingsShield then return true end

    -- fallback: try GuiService/OpenInGameMenu or StarterGui SetCore
    local ok1 = pcall(function() GuiService:OpenInGameMenu() end)
    if ok1 then return true end
    local ok2 = pcall(function() StarterGui:SetCore("ToggleGameMenu", true) end)
    if ok2 then return true end
    local ok3 = pcall(function() StarterGui:SetCore("OpenSettings") end)
    if ok3 then return true end

    -- last resort: try VirtualInputManager to send ESC if available
    local vim = game:FindService("VirtualInputManager")
    if vim then
        local ok4 = pcall(function()
            vim:SendKeyEvent(true, Enum.KeyCode.Escape, false, game)
            task.wait(0.02)
            vim:SendKeyEvent(false, Enum.KeyCode.Escape, false, game)
        end)
        if ok4 then return true end
    end

    return false
end

seeAll.MouseButton1Click:Connect(function()
    setBackgroundState(false, false) -- close panel via tween (OFF)
    tryOpenRobloxMenu()
end)

-- ============== LE / Re / Rm behaviors ==========
LE.MouseButton1Click:Connect(function()
    if localPlayer then pcall(function() localPlayer:Kick("You leave the experience.") end) end
end)

Re.MouseButton1Click:Connect(function()
    local plr = localPlayer
    if not plr then return end
    local char = plr.Character
    if char then
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if humanoid then
            pcall(function() humanoid.Health = 0 end)
        else
            pcall(function() char:BreakJoints() end)
        end
    end
end)

Rm.MouseButton1Click:Connect(function()
    setBackgroundState(false, false)
end)

-- Keep Set rotation consistent
RunService.Heartbeat:Connect(function()
    local open = backgroundIsOpen()
    if open then
        if math.abs(Set.Rotation - 0) > 1 then Set.Rotation = 0 end
    else
        if math.abs(Set.Rotation - 180) > 1 then Set.Rotation = 180 end
    end
end)

-- ============== Hamburger toggle (tb size + icons) ==============
local tbOpen = false
local function toggleTB()
    tbOpen = not tbOpen
    if tbOpen then
        tweenObject(tb, { Size = UDim2.new(0.365, 0, 10, 0) }, 0.28, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        hbm.Image = "rbxassetid://10002398990"
    else
        tweenObject(tb, { Size = UDim2.new(0, 0, 0, 0) }, 0.28, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        hbm.Image = "rbxassetid://12214197591"
    end
end
hbm.MouseButton1Click:Connect(toggleTB)
